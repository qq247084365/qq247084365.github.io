<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UnityGameframework 内置模块</title>
    <url>/2024/08/09/UnityGameframework-01/</url>
    <content><![CDATA[<h3 id="Game-Framework-内置模块"><a href="#Game-Framework-内置模块" class="headerlink" title="Game Framework 内置模块"></a>Game Framework 内置模块</h3><p><code>Game Framework</code> 是一个基于 Unity 引擎的游戏框架，提供了多种模块封装了游戏开发过程中常用的功能。以下是框架中包含的 19 个内置模块的详细描述：</p>
<h4 id="来自：https-github-com-EllanJiang-GameFramework"><a href="#来自：https-github-com-EllanJiang-GameFramework" class="headerlink" title="来自：https://github.com/EllanJiang/GameFramework/"></a>来自：<a class="link"   href="https://github.com/EllanJiang/GameFramework/" >https://github.com/EllanJiang/GameFramework/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><h4 id="1-全局配置-Config"><a href="#1-全局配置-Config" class="headerlink" title="1. 全局配置 (Config)"></a>1. 全局配置 (Config)</h4><ul>
<li>全局配置模块用于存储一些全局的只读游戏配置数据，例如玩家初始速度、游戏初始音量等。这些数据通常在游戏启动时加载，并在整个游戏过程中保持不变。</li>
</ul>
<h4 id="2-数据结点-Data-Node"><a href="#2-数据结点-Data-Node" class="headerlink" title="2. 数据结点 (Data Node)"></a>2. 数据结点 (Data Node)</h4><ul>
<li>数据结点模块允许开发者以树状结构的形式保存任意类型的数据，用于管理游戏运行时的各种数据。例如，可以将游戏的配置数据、运行状态等信息组织在一个树状结构中，方便读取和修改。</li>
</ul>
<h4 id="3-数据表-Data-Table"><a href="#3-数据表-Data-Table" class="headerlink" title="3. 数据表 (Data Table)"></a>3. 数据表 (Data Table)</h4><ul>
<li>数据表模块允许开发者使用表格（如 Microsoft Excel）形式的配置文件来管理游戏数据。数据表的格式是可以自定义的，并且在游戏中通过此模块使用这些数据表。</li>
</ul>
<h4 id="4-调试器-Debugger"><a href="#4-调试器-Debugger" class="headerlink" title="4. 调试器 (Debugger)"></a>4. 调试器 (Debugger)</h4><ul>
<li>调试器模块在游戏在 Unity 编辑器中运行或以 Development 方式发布运行时提供调试器窗口，便于查看运行时日志、调试信息等。开发者可以方便地将自己的功能注册到调试器窗口上并使用。</li>
</ul>
<h4 id="5-下载-Download"><a href="#5-下载-Download" class="headerlink" title="5. 下载 (Download)"></a>5. 下载 (Download)</h4><ul>
<li>下载模块提供文件下载功能，支持断点续传，并可指定允许几个下载器进行同时下载。这个模块在更新资源时会主动被调用。</li>
</ul>
<h4 id="6-实体-Entity"><a href="#6-实体-Entity" class="headerlink" title="6. 实体 (Entity)"></a>6. 实体 (Entity)</h4><ul>
<li>实体模块将游戏场景中动态创建的一切物体定义为实体。此模块提供管理实体和实体组的功能，如显示隐藏实体、挂接实体（如挂接武器、坐骑，或者抓起另一个实体）等。实体使用结束后可以不立刻销毁，从而等待下一次重新使用。</li>
</ul>
<h4 id="7-事件-Event"><a href="#7-事件-Event" class="headerlink" title="7. 事件 (Event)"></a>7. 事件 (Event)</h4><ul>
<li>事件模块提供游戏逻辑监听、抛出事件的机制。<code>Game Framework</code> 中的很多模块在完成操作后都会抛出内置事件，监听这些事件将大大解除游戏逻辑之间的耦合。开发者也可以定义自己的游戏逻辑事件。</li>
</ul>
<h4 id="8-文件系统-File-System"><a href="#8-文件系统-File-System" class="headerlink" title="8. 文件系统 (File System)"></a>8. 文件系统 (File System)</h4><ul>
<li>文件系统模块使用类似磁盘的概念对零散文件进行集中管理，优化资源加载时产生的内存分配，甚至可以对资源进行局部片段加载，这些都将极大提升资源加载时的性能。</li>
</ul>
<h4 id="9-有限状态机-FSM"><a href="#9-有限状态机-FSM" class="headerlink" title="9. 有限状态机 (FSM)"></a>9. 有限状态机 (FSM)</h4><ul>
<li>有限状态机模块提供创建、使用和销毁有限状态机的功能，一些适用于有限状态机机制的游戏逻辑，使用此模块将是一个不错的选择。</li>
</ul>
<h4 id="10-本地化-Localization"><a href="#10-本地化-Localization" class="headerlink" title="10. 本地化 (Localization)"></a>10. 本地化 (Localization)</h4><ul>
<li>本地化模块提供本地化功能，也就是多语言支持。<code>Game Framework</code> 不仅支持文本的本地化，还支持任意资源的本地化，比如游戏中释放烟花特效也可以做出几个多国语言的版本。</li>
</ul>
<h4 id="11-网络-Network"><a href="#11-网络-Network" class="headerlink" title="11. 网络 (Network)"></a>11. 网络 (Network)</h4><ul>
<li>网络模块提供使用 Socket 长连接的功能，当前支持 TCP 协议，同时兼容 IPv4 和 IPv6 两个版本。开发者可以同时建立多个连接与多个服务器进行通信，支持接入各种协议库。</li>
</ul>
<h4 id="12-对象池-Object-Pool"><a href="#12-对象池-Object-Pool" class="headerlink" title="12. 对象池 (Object Pool)"></a>12. 对象池 (Object Pool)</h4><ul>
<li>对象池模块提供对象缓存池的功能，避免频繁地创建和销毁各种游戏对象，提高游戏性能。除了 <code>Game Framework</code> 自身使用了对象池，开发者还可以很方便地创建和管理自己的对象池。</li>
</ul>
<h4 id="13-流程-Procedure"><a href="#13-流程-Procedure" class="headerlink" title="13. 流程 (Procedure)"></a>13. 流程 (Procedure)</h4><ul>
<li>流程模块是贯穿游戏运行时整个生命周期的有限状态机。通过流程将不同的游戏状态进行解耦是一个非常好的习惯。对于不同类型的游戏，可以根据需要定制各种流程。</li>
</ul>
<h4 id="14-资源-Resource"><a href="#14-资源-Resource" class="headerlink" title="14. 资源 (Resource)"></a>14. 资源 (Resource)</h4><ul>
<li>资源模块提供了一套完整的异步加载资源体系，避免使用同步加载方式。这个模块只提供了异步加载资源的接口，并支持默认的内存管理策略。</li>
</ul>
<h4 id="15-场景-Scene"><a href="#15-场景-Scene" class="headerlink" title="15. 场景 (Scene)"></a>15. 场景 (Scene)</h4><ul>
<li>场景模块提供场景管理的功能，可以同时加载多个场景，也可以随时卸载任何一个场景，从而很容易地实现场景的分部加载。</li>
</ul>
<h4 id="16-配置-Setting"><a href="#16-配置-Setting" class="headerlink" title="16. 配置 (Setting)"></a>16. 配置 (Setting)</h4><ul>
<li>配置模块以键值对的形式存储玩家数据，对 <code>UnityEngine.PlayerPrefs</code> 进行封装，也可以将这些数据直接存储在磁盘上。</li>
</ul>
<h4 id="17-声音-Sound"><a href="#17-声音-Sound" class="headerlink" title="17. 声音 (Sound)"></a>17. 声音 (Sound)</h4><ul>
<li>声音模块提供管理声音和声音组的功能，开发者可以自定义一个声音的音量、是 2D 声音还是 3D 声音，甚至是直接绑定到某个实体上跟随实体移动。</li>
</ul>
<h4 id="18-界面-UI"><a href="#18-界面-UI" class="headerlink" title="18. 界面 (UI)"></a>18. 界面 (UI)</h4><ul>
<li>界面模块提供管理界面和界面组的功能，如显示隐藏界面、激活界面、改变界面层级等。无论使用 Unity 内置的 uGUI 还是其他类型的 UI 插件，只要派生自 <code>UIFormLogic</code> 类并实现自己的界面类即可使用。</li>
</ul>
<h4 id="19-Web-请求-Web-Request"><a href="#19-Web-请求-Web-Request" class="headerlink" title="19. Web 请求 (Web Request)"></a>19. Web 请求 (Web Request)</h4><ul>
<li>Web 请求模块提供使用短连接的功能，可以用 Get 或者 Post 方法向服务器发送请求并获取响应数据，可指定允许几个 Web 请求器进行同时请求。</li>
</ul>
<p>因为模块比较多，所以我需要分模块来学习。</p>
<hr>
<h3 id="引用：EllanJiang-Github内容"><a href="#引用：EllanJiang-Github内容" class="headerlink" title="引用：EllanJiang Github内容"></a>引用：EllanJiang Github内容</h3><a class="button  center large" href='https://github.com/EllanJiang' title='Github'><i class='fa fa-thumbs-up'></i> Github</a>
<a class="button  center large" href='https://github.com/EllanJiang/StarForce/archive/refs/heads/master.zip' title='Unity示例项目下载'><i class='fa-solid fa-download'></i> Unity示例项目下载</a>
<a class="button  center large" href='https://github.com/EllanJiang/GameFramework/archive/refs/heads/master.zip' title='GameFramework源码下载'><i class='fa-solid fa-download'></i> GameFramework源码下载</a>
<a class="button  center large" href='https://github.com/EllanJiang/GameFramework/archive/refs/heads/master.zip' title='GameFramework（GF层）源码下载'><i class='fa-solid fa-download'></i> GameFramework（GF层）源码下载</a>
<a class="button  center large" href='https://github.com/EllanJiang/UnityGameFramework/archive/refs/heads/master.zip' title='GameFramework（UGF层|将GF层封装成了动态链接库）示例下载'><i class='fa-solid fa-download'></i> GameFramework（UGF层|将GF层封装成了动态链接库）示例下载</a>

<h3 id="参考文档：花桑大佬"><a href="#参考文档：花桑大佬" class="headerlink" title="参考文档：花桑大佬"></a>参考文档：花桑大佬</h3><a class="button  center large" href='https://www.drflower.top/' title='博客'><i class='fa fa-thumbs-up'></i> 博客</a>

<a class="button  center large" href='https://github.com/DrFlower/TowerDefense-GameFramework-Demo/archive/refs/heads/master.zip' title='塔防DEMO'><i class='fa fa-thumbs-up'></i> 塔防DEMO</a>

<h4 id="以上内容只为了方便学习与下载集合到一起"><a href="#以上内容只为了方便学习与下载集合到一起" class="headerlink" title="以上内容只为了方便学习与下载集合到一起!!!!"></a><font color="red">以上内容只为了方便学习与下载集合到一起!!!!</font></h4>]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 整体架构</title>
    <url>/2024/08/13/UnityGameframework-02/</url>
    <content><![CDATA[<h3 id="Game-Framework-整体架构"><a href="#Game-Framework-整体架构" class="headerlink" title="Game Framework 整体架构"></a>Game Framework 整体架构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-GAME.drawio.png"
                      alt="架构图"
                ></p>
<ul>
<li>底层使用GF原生模块</li>
<li>中间层结合了UGF以及Unity原生层</li>
<li>最上层则是Game层，关注游戏玩法逻辑等内容</li>
</ul>
<hr>
<h3 id="GF层"><a href="#GF层" class="headerlink" title="GF层"></a>GF层</h3><ul>
<li>提供了独立的模块，所有模块继承抽象类GameFrameworkModule，所有模块不依赖任何Unity的实现</li>
</ul>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul>
<li>GameFrameworkModule抽象出了Priority,Update,Shutdown<br>– Proiority 决定模块在框架中轮询的优先级<br>– Update 对应模块需要轮询的逻辑<br>– Shutdown 关闭并清理游戏框架模块</li>
</ul>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><ul>
<li>GameFrameworkModule提供了所有模块需要的基础接口，通过BaseComp轮询所有Update<br>– 如果模块需要引擎提供的参数，可以在UGF层初始化模块时传入<br>– 如果模块需要调用引擎原生的功能，框架抽象出了Helper辅助器，辅助器继承MonoBehaviour</li>
</ul>
<h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><ul>
<li>每个模块实现对应模块的接口<br>– 如UIManager实现接口IUIManager,即XXXManager实现IXXXManager，降低耦合度，可替换性强</li>
</ul>
<h3 id="UGF层"><a href="#UGF层" class="headerlink" title="UGF层"></a>UGF层</h3><h4 id="UGF层与GF层的关系"><a href="#UGF层与GF层的关系" class="headerlink" title="UGF层与GF层的关系"></a>UGF层与GF层的关系</h4><ul>
<li>UGF层将模块组件化，实现需要依赖引擎功能的模块都存在一个XXXComponent类</li>
</ul>
<h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><ul>
<li>XXXCompnent 继承 GameFrameworkComponent 继承 MonoBehaviour</li>
</ul>
<h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><ul>
<li>GameFrameworkComponent 实现了Awake函数，在对象生命周期开始时注册该组件到GameEntry组件链表内并创建IXXXMananger的实例,且方便其他地方通过GameEntry访问Component</li>
</ul>
<h5 id="-5"><a href="#-5" class="headerlink" title=""></a></h5><ul>
<li>所有被注册到GameEntry内的组件都会在Basecomp中轮询组件的Update函数</li>
</ul>
<h5 id="-6"><a href="#-6" class="headerlink" title=""></a></h5><ul>
<li>XXXComponent 没有直接依赖模块类，而是依赖模块抽象接口</li>
</ul>
<h5 id="-7"><a href="#-7" class="headerlink" title=""></a></h5><ul>
<li>例如：UIComponent-&gt;IUIMnanger</li>
</ul>
<h5 id="-8"><a href="#-8" class="headerlink" title=""></a></h5><ul>
<li>组件与模块之间实现松耦合</li>
</ul>
<h5 id="-9"><a href="#-9" class="headerlink" title=""></a></h5><ul>
<li>通过替换接口实现更容易进行单元测试</li>
</ul>
<h5 id="-10"><a href="#-10" class="headerlink" title=""></a></h5><ul>
<li>符合SOLID-DIP:鼓励依赖抽象而不是实现</li>
</ul>
<h5 id="-11"><a href="#-11" class="headerlink" title=""></a></h5><ul>
<li>结合UnityEditor扩展序列化模块属性到Inspector进行可视化配置</li>
</ul>
<h4 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Schedule.drawio.png"
                      alt="alt text"
                ></p>
<ul>
<li><p>Unity 场景中脚本必须继承MonoBehaviour,所有模块可以通过继承GameFrameworkComponent挂载到场景的对象中,而组件中属性也存在GameFramework中依赖的模块</p>
</li>
<li><p>游戏启动会检查场景中GameFrameworkComponent类型并执行Awake初始化</p>
</li>
</ul>
<h5 id="-12"><a href="#-12" class="headerlink" title=""></a></h5><ul>
<li>执行GameEntry.RegisterComponent注册当前组件到s_GameFrameworkComponents,方便通过GameEntry访问组件</li>
</ul>
<h5 id="-13"><a href="#-13" class="headerlink" title=""></a></h5><ul>
<li>代码中是通过 GetModule&lt;T&gt; 获取模块,当GameFrameworkModule中s_GameFrameworkModules链表存在模块时会直接返回对应模块,如果不存在则通过反射创建</li>
</ul>
<h5 id="-14"><a href="#-14" class="headerlink" title=""></a></h5><ul>
<li>实际上是调用 GetModule&lt;T&gt; 时设置了T的类型,而我们传入的是接口IXXXManager,源码中通过裁剪字符串获得当前模块类型,这可能也是规范命名的好处</li>
</ul>
<h5 id="-15"><a href="#-15" class="headerlink" title=""></a></h5><ul>
<li>并不是所有组件里的模块都会在Awake中初始化，例如ResourceComponentAwake中只注册了组件，具体为什么后续再分析</li>
</ul>
<h5 id="-16"><a href="#-16" class="headerlink" title=""></a></h5><ul>
<li>在Start中,框架初始化所有组件，前面说到GameFrameworkModule的模块都存在优先级属性Priority,优先级越高创建越早轮询就越早,其中某些模块会创建以及设置辅助器<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>辅助器 </summary>
              <div class='content'>
              <ul><li><p><strong>简化代码</strong>：辅助器可以封装复杂的操作或常见的功能，使主逻辑代码更简洁。例如，提供常用的字符串操作、数据转换等功能。</p></li><li><p><strong>提升可读性</strong>：通过将常用的代码模式封装到辅助器中，可以提高代码的可读性和维护性，避免重复的代码块。</p></li><li><p><strong>增强功能</strong>：辅助器可以提供额外的功能，比如日志记录、配置管理或错误处理，增强主系统的功能。</p></li><li><p><strong>提高复用性</strong>：将通用功能提取到辅助器中，能够在多个地方复用，减少冗余代码。</p></li><li><p><strong>分离关注点</strong>：辅助器帮助将代码的不同职责分离，使主业务逻辑与具体的实现细节解耦。</p></li></ul>
              </div>
            </details></li>
</ul>
<h5 id="-17"><a href="#-17" class="headerlink" title=""></a></h5><ul>
<li>Procedure 是框架中管理整个游戏流程的模块,跟别的组件不同的是，ProcedureComponent的Start函数通过协程执行并在初始化组件以及添加流程到状态机后延迟一帧启动流程。</li>
<li>游戏启动的第二帧调用ProcedureManager.StartProcedure -&gt; ProcedureBase.OnEnter</li>
</ul>
<h4 id="GameFramework-Update流程"><a href="#GameFramework-Update流程" class="headerlink" title="GameFramework Update流程"></a>GameFramework Update流程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Update.drawio.png"
                      alt="GameUpdate"
                ></p>
<h5 id="-18"><a href="#-18" class="headerlink" title=""></a></h5><ul>
<li>引擎调用Monobehaviour的Update</li>
</ul>
<h5 id="-19"><a href="#-19" class="headerlink" title=""></a></h5><ul>
<li>BaseComponent作为所有模块Update的入口，其中的Update方法按照模块优先级调用模块内的Update (GameFrameworkEntry类通过s_GameFrameworkModules保存了所有已创建的模块)</li>
</ul>
<h4 id="GameFramework-ShutDown流程"><a href="#GameFramework-ShutDown流程" class="headerlink" title="GameFramework ShutDown流程"></a>GameFramework ShutDown流程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Shutdown.drawio.png"
                      alt="GameUpdate"
                ></p>
<ul>
<li>业务层调用GameEntry.ShutDown(ShutdownType)</li>
</ul>
<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>ShutdownType </summary>
              <div class='content'>
              <ul><li><p><strong>仅关闭游戏框架。</strong>：None &#x3D; 0</p></li><li><p><strong>关闭游戏框架并重启游戏。</strong>：Restart</p></li><li><p><strong>关闭游戏框架并退出游戏。</strong>：Quit</p></li></ul>
              </div>
            </details>

<ul>
<li>GameEntry.ShutDown调用了BaseComponent的Shutdown函数</li>
<li>BaseComponent的Shutdown调用了Object.Destroy()销毁自身GameObject;(BaseComponent extend GameframeworkComponent)</li>
<li>释放模块注册在GameEntry中的引用</li>
<li>根据传入的ShutdownType执行LoadScene或Application.Quit</li>
<li>Monobehavior 对象被执行Destroy后在当前帧结束后才会调用被执行对象的OnDestroy</li>
<li>BaseComponent销毁事件 -&gt; 调用GameFrameworkEntry.Shutdown -&gt; 逆序遍历链表调用GameFrameworkModule.Shutdown</li>
</ul>
<h3 id="参考文档：花桑大佬"><a href="#参考文档：花桑大佬" class="headerlink" title="参考文档：花桑大佬"></a>参考文档：花桑大佬</h3><a class="button  center large" href='https://www.drflower.top/' title='博客'><i class='fa fa-thumbs-up'></i> 博客</a>

]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Gameframework 序言</title>
    <url>/2024/08/09/UnityGameframework_00/</url>
    <content><![CDATA[<h2 id="关于项目使用GameframeWork的记录"><a href="#关于项目使用GameframeWork的记录" class="headerlink" title="关于项目使用GameframeWork的记录"></a>关于项目使用GameframeWork的记录</h2><h3 id="为什么使用GameframeWork？"><a href="#为什么使用GameframeWork？" class="headerlink" title="为什么使用GameframeWork？"></a>为什么使用GameframeWork？</h3><ul>
<li><strong>作用</strong>：保证项目的支撑性以及约束性;</li>
<li><strong>为什么不选择自研</strong>：目前因为是新公司，只有两个开发，如果使用自研框架，就算可以保证框架的质量也需要很长的时间，而且我并没有这个能力，调研了不同的框架，像ET、GameFrameWork，都需要很长的时间，需要不断迭代，不断更新，ET到目前已经超过了五年，GameFrameWork从2013-2021年。</li>
</ul>
<h2 id="GameFramework-和-ET-的区别"><a href="#GameFramework-和-ET-的区别" class="headerlink" title="GameFramework 和 ET 的区别"></a>GameFramework 和 ET 的区别</h2><h3 id="1-设计理念与架构"><a href="#1-设计理念与架构" class="headerlink" title="1. 设计理念与架构"></a>1. 设计理念与架构</h3><h4 id="GameFramework"><a href="#GameFramework" class="headerlink" title="GameFramework"></a>GameFramework</h4><ul>
<li><strong>轻量级框架</strong>：GameFramework 是一个轻量级的游戏框架，专注于提供基础的游戏开发功能，如资源管理、UI 管理、事件系统、网络通信、对象池、配置管理等。</li>
<li><strong>模块化设计</strong>：采用模块化设计，开发者可以根据项目需求选择需要的模块，不必使用全部功能，提升了灵活性和扩展性。</li>
<li><strong>Unity 集成</strong>：主要为 Unity 引擎设计，旨在简化 Unity 游戏开发的常见任务，提供了许多 Unity 专用的工具和组件。</li>
</ul>
<h4 id="ET-ET-Framework"><a href="#ET-ET-Framework" class="headerlink" title="ET (ET Framework)"></a>ET (ET Framework)</h4><ul>
<li><strong>高性能框架</strong>：ET 是一个高性能的分布式游戏服务器框架，特别适用于大规模在线游戏的服务器端开发。它基于 C# 和 .NET 技术栈，支持多线程和多进程。</li>
<li><strong>Actor 模型</strong>：使用 Actor 模型来处理并发和通信，将复杂的多线程编程问题简化为消息传递的方式，非常适合处理大规模并发任务。</li>
<li><strong>分布式系统支持</strong>：提供了强大的分布式系统支持，可以轻松搭建跨服务器、跨进程的系统，适用于大型多人在线游戏（MMO）等需要分布式架构的场景。</li>
</ul>
<h3 id="2-功能与特性"><a href="#2-功能与特性" class="headerlink" title="2. 功能与特性"></a>2. 功能与特性</h3><h4 id="GameFramework-的功能与特性"><a href="#GameFramework-的功能与特性" class="headerlink" title="GameFramework 的功能与特性"></a>GameFramework 的功能与特性</h4><ul>
<li><strong>面向客户端</strong>：主要功能集中在客户端游戏开发，如资源管理、UI 系统、输入管理、声音管理、以及与 Unity 引擎的深度集成。</li>
<li><strong>扩展性</strong>：通过插件系统，开发者可以自定义和扩展框架的功能，适合各种中小型游戏项目。</li>
<li><strong>简易上手</strong>：对于使用 Unity 的开发者来说，GameFramework 的上手门槛较低，易于快速构建游戏原型。</li>
</ul>
<h4 id="ET"><a href="#ET" class="headerlink" title="ET"></a>ET</h4><ul>
<li><strong>面向服务端</strong>：ET 更侧重于服务端的开发，提供了强大的网络通信、分布式处理、负载均衡等功能，适合需要高并发、高可靠性要求的游戏。</li>
<li><strong>Actor 模型的并发处理</strong>：利用 Actor 模型处理并发问题，简化了复杂的多线程编程，并提高了系统的可扩展性和可维护性。</li>
<li><strong>热更新支持</strong>：ET 支持服务端的热更新，可以在不重启服务器的情况下动态更新代码和数据，非常适合长期运营的大型游戏项目。</li>
</ul>
<h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><h4 id="GameFramework-的应用场景"><a href="#GameFramework-的应用场景" class="headerlink" title="GameFramework 的应用场景"></a>GameFramework 的应用场景</h4><ul>
<li>适合中小型 Unity 项目，尤其是单机游戏或简单的联网游戏。对于需要快速开发和原型验证的项目，GameFramework 提供了足够的功能。</li>
<li>对于那些不需要复杂服务器架构的项目，它是一个非常好的选择。</li>
</ul>
<h4 id="ET-的应用场景"><a href="#ET-的应用场景" class="headerlink" title="ET 的应用场景"></a>ET 的应用场景</h4><ul>
<li>适合大型多人在线游戏（如 MMORPG）、大规模网络游戏，以及对服务端性能和稳定性要求较高的项目。</li>
<li>对于需要分布式系统支持、复杂逻辑处理和高并发处理的项目，ET 是一个强大的选择。</li>
</ul>
<h3 id="4-社区与支持"><a href="#4-社区与支持" class="headerlink" title="4. 社区与支持"></a>4. 社区与支持</h3><h4 id="GameFramework-的社区与支持"><a href="#GameFramework-的社区与支持" class="headerlink" title="GameFramework 的社区与支持"></a>GameFramework 的社区与支持</h4><ul>
<li>社区活跃，适合 Unity 开发者。提供了较为丰富的文档和教程，有许多开发者在使用和贡献。</li>
</ul>
<h4 id="ET-的社区与支持"><a href="#ET-的社区与支持" class="headerlink" title="ET 的社区与支持"></a>ET 的社区与支持</h4><ul>
<li>社区主要集中在服务端开发人员，讨论的内容多与服务器架构、高并发、分布式系统相关。ET 的文档较为完善，但由于其复杂性，学习曲线可能较陡。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>GameFramework</strong> 更适合那些需要快速开发、依赖 Unity 的中小型游戏项目，提供了良好的客户端开发支持。</li>
<li><strong>ET</strong> 则适合那些需要构建复杂的分布式系统、大型在线游戏的项目，特别是在服务端开发和高并发处理方面表现出色。</li>
</ul>
]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 状态机</title>
    <url>/2024/08/16/UnityGameframework-Fsm/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 流程模块</title>
    <url>/2024/08/16/UnityGameframework-Procedure/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
</search>
