<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unity-HybridCLR-实践</title>
    <url>/2024/09/05/Unity-Hybridclr-instance/</url>
    <content><![CDATA[<a class="button  center large" href='https://hybridclr.doc.code-philosophy.com/docs/beginner/quickstart' title='参考文档'><i class='fa fa-thumbs-up'></i> 参考文档</a>

<h2 id="实践环境"><a href="#实践环境" class="headerlink" title="实践环境"></a>实践环境</h2><ul>
<li><p>Unity 2022.3.41f(LTS)</p>
</li>
<li><p>IL2CPP模块</p>
</li>
<li><p>Visual Studio 2022 (添加Unity游戏开发、c++游戏开发组件)</p>
</li>
<li><p>Package Manager 安装 com.code-philosophy.hybridclr 我用的版本是v6.7.1</p>
</li>
</ul>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul>
<li><p>基础的步骤就不记录了（例如场景创建什么的），只记录与Hybridclr相关的内容</p>
</li>
<li><p>作者提供的示例项目，我是在示例项目基础上开始的</p>
<a class="button  center large" href='https://github.com/focus-creative-games/hybridclr_trial' title='GitHub'><i class='fa fa-thumbs-up'></i> GitHub</a>
<a class="button  center large" href='https://gitee.com/focus-creative-games/hybridclr_trial' title='Gitee'><i class='fa fa-thumbs-up'></i> Gitee</a></li>
</ul>
<p><strong>创建热更模块：</strong></p>
<ul>
<li><p>创建 <code>Assets/HotUpdate2</code> 目录</p>
</li>
<li><p>在目录下创建Assembly Definition,创建一个名为HotUpdate2的程序集模块</p>
</li>
</ul>
<p><strong>配置HybridCLR：</strong></p>
<ul>
<li>点击工具栏</li>
<li>打开 Project Settings</li>
<li>选择 HybridCLR Settings</li>
<li>配置 Hot Update Assembly Definitions</li>
<li>添加程序集 HotUpdate2</li>
</ul>
<p><strong>配置PlayerSetting:</strong></p>
<ul>
<li>Project Settings-&gt;Player-&gt;Other-&gt;Configuration</li>
<li>Scripting Backend 切换为 IL2CPP</li>
<li>Api Compatability Level 切换为 .Net Framework</li>
<li>Api Compatability Level版本选择：.Net 4.x(Unity 2019-2020) 或 .Net Framework（Unity 2021+）</li>
<li>HybridClr包低于4.0需要关闭增量GC</li>
</ul>
<p><strong>创建热更脚本：</strong></p>
<ul>
<li>在热更模块目录下创建Hello.cs</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>Hello.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Hello HybridCLR&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StaticStart</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Call static Fun.Hello HybridCLR&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>加载热更程序集：</strong></p>
<ul>
<li>编辑器加载</li>
<li>创建 EditorLoadDll.cs 脚本</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>EditorLoadDLL.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EditorLoadDll</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        Assembly hotUpdateAss = System.AppDomain.CurrentDomain.GetAssemblies().First(a =&gt; a.GetName().Name == <span class="string">&quot;HotUpdate2&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        Assembly hotUpdateAss = Assembly.Load(File.ReadAllBytes(<span class="string">$&quot;<span class="subst">&#123;Application.streamingAssetsPath&#125;</span>/HotUpdate2.dll.bytes&quot;</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        Type type = hotUpdateAss.GetType(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        type.GetMethod(<span class="string">&quot;StaticStart&quot;</span>).Invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> hello = type.Assembly.CreateInstance(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        hello.GetType().GetMethod(<span class="string">&quot;Start&quot;</span>).Invoke(hello, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>工具栏-&gt;Build-&gt;BuildAssetsAndCopyToStreamingAssets（会打包并复制dll到<code>StreamingAssets</code>目录下）</li>
<li>此外hybridCLR还提供单独构建DLL的选项，<code>工具栏-&gt;HybridCLR-&gt;CompileDll</code>(会打包到工程根目录<code>HybridCLRData/HotUpdateDlls</code>下,编辑器下复制对应DLL并增加.bytes后缀再复制到Asset&#x2F;StreamingAsset下)</li>
<li>场景内创建一个GameObject-&gt;挂载脚本-&gt;运行</li>
</ul>
<h2 id="打包后运行并热更"><a href="#打包后运行并热更" class="headerlink" title="打包后运行并热更"></a>打包后运行并热更</h2><ul>
<li><p>工具栏-&gt;File-&gt;Biuld And Run<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/Unity-Hybridclr/runAtPc.png"
                      alt="打包运行"
                ></p>
</li>
<li><p>修改Hello.cs</p>
</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>Hello.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Hot fix Hello HybridCLR&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StaticStart</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Hot fix Call static Fun.Hello HybridCLR&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>工具栏-&gt;HybridCLR-&gt;CompileDLL-&gt;Win64(重新构建DLL)</li>
<li>给DLL添加.bytes后缀替换游戏包内的DLL（游戏文件夹&#x2F;HybridCLRTrial_Data&#x2F;StreamingAssets）</li>
<li>重新运行游戏</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/Unity-Hybridclr/hotfixRun.png"
                      alt="hotfixRun"
                ></p>
]]></content>
      <categories>
        <category>HybridCLR</category>
      </categories>
      <tags>
        <tag>热更框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity可视化剧情编辑器</title>
    <url>/2024/11/04/UnityDialogueEditor/</url>
    <content><![CDATA[<h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><h3 id="基于NodeGraphProcess-graphView-Odin"><a href="#基于NodeGraphProcess-graphView-Odin" class="headerlink" title="基于NodeGraphProcess+graphView+Odin"></a>基于NodeGraphProcess+graphView+Odin</h3><p><strong>NodeGraphProcess:</strong><br>NodeGraphProcessor 基于 Unity 的 GraphView 技术，速度也非常快，并且可以很好地处理大型图形。<br><strong>GraphView:</strong><br>GraphView 是 Unity 中用于构建图形用户界面的一个系统，通常用于创建可视化编辑器、节点图形或其他需要图形交互的应用。<br><strong>Odin:</strong><br>Odin Inspector 是一个 Unity 编辑器扩展工具，旨在增强 Unity 编辑器的功能和用户体验。它提供了许多强大的功能，允许开发者更轻松地创建和管理游戏对象的属性和编辑器界面。</p>
<h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityDialogueEditor/%E5%89%A7%E6%83%85%E7%BC%96%E8%BE%91%E5%99%A8-%E6%B5%81%E7%A8%8B%E8%A7%86%E5%9B%BE%E7%B1%BB.drawio.png"
                      alt="流程视图"
                ></p>
<p><strong>流程Graph类设计：</strong></p>
<ul>
<li>剧情编辑器的流程视图继承了NodeGraphProcessor提供的基类BaseGraph</li>
<li>BaseGraph提供了可视化流图的基础功能，编辑器界面的实现基于BaseGraphView</li>
<li>StroyGraph实现了IRunStroyGraph,IRunStroyGraph提供了Graph在运行时需要处理的函数,通过IRunStroyGraph避免引用StroyGraph的实例导致循环引用</li>
<li>所有的Graph的最下层的基类都是SerializedScriptableObject，意味着它可以被Unity序列化并保存，<br>得益于odin可以更好的配置里面的内容</li>
</ul>
<h3 id="节点类图"><a href="#节点类图" class="headerlink" title="节点类图"></a>节点类图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityDialogueEditor/%E5%89%A7%E6%83%85%E7%BC%96%E8%BE%91%E5%99%A8-%E8%8A%82%E7%82%B9%E8%AE%BE%E8%AE%A1.drawio.png"
                      alt="节点类图"
                ></p>
<p><strong>节点设计:</strong></p>
<ul>
<li><p>NodeGraphProcessor提供了BaseNode作为节点的基类，在这个基础上派生出了StroyBaseNode以及StroyExcuteNode,这里考虑到了部分节点不存在Next只依赖节点内部实现。</p>
</li>
<li><p>类图里简略了很多节点的具体关系，因为太多了</p>
</li>
<li><p>渲染节点需要覆写基类中INodeRuntime的两个函数实现,分别是Render()以及Refresh(),后续渲染逻辑的运行大部分依赖这两个函数的实现。</p>
</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RenderNode</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">var</span> stage = GameObject.Find(<span class="string">&quot;StageCanvas&quot;</span>).transform;</span><br><span class="line">       <span class="keyword">if</span> (asset != <span class="literal">null</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//渲染节点画面</span></span><br><span class="line">           asset.GenerateDialogByInfo(stage);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           Debug.LogWarning(<span class="string">&quot;DialogAsset 为空，无法渲染节点内容&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RefreshNode</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       DelayUpdate();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>如果需要获取节点内部数据需要节点实现IStroyNodeGetInfo，通过接口解耦，组合接口让派生类拥有更多功能</p>
</li>
<li><p>至于IStroyOptionNode是为了Editor下将所有剧情编辑器的节点规整到一起，打开节点编辑面板时可以保证只存在剧情编辑器开发的节点，这里通过反射以及配置表实现，应该有更好的方式，还没想到</p>
</li>
<li><p>NodeView影响节点在流程视图里的显示，要不要重写看具体需求</p>
</li>
<li><p>节点内部需要覆写 TryGetOutputValue(),这个函数实现影响下一个节点获取上一个节点输出的内容，当然也有部分节点不需要实现，看具体需求。</p>
</li>
</ul>
<a class="button  center large" href='https://alelievr.github.io/NodeGraphProcessor/api/index.html' title='NodeGraphProcessor文档'><i class='fa fa-thumbs-up'></i> NodeGraphProcessor文档</a>


<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li>将整个流程图想象成一个大舞台，在舞台演示剧情的内容</li>
<li>将节点想象成剧情里的一幕</li>
<li>所有内容都在舞台中展示，一幕完成切换下一幕<br><strong>执行流程图：</strong></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityDialogueEditor/%E5%89%A7%E6%83%85%E7%BC%96%E8%BE%91%E5%99%A8-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.drawio.png"
                      alt="执行流程"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>目前还存在一定问题，执行流程还有一部分情况未完善</li>
<li>整体设计考虑了将节点抽象成一个个体，框架不依赖节点具体实现，框架只规范节点执行的流程，<br>这样的好处我能想到的就是每个节点都能具体实现任何逻辑，只要保证节点与节点之间可以步进，理论上在节点中添加一个小游戏都没有问题，说到这里我觉得我还应该去规范节点的开始与结束（简称状态机），保证步进的稳定，避免步进时上一个未完成或下一个还没有准备好的情况。</li>
</ul>
<h2 id="剧情编辑器截图"><a href="#剧情编辑器截图" class="headerlink" title="剧情编辑器截图"></a>剧情编辑器截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityDialogueEditor/image.png"
                      alt="alt text"
                ></p>
<ul>
<li>生成创建剧情所需资源的编辑器工具，主要使用Odin，大部分内容文档都提供了帮助</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityDialogueEditor/process_unity.png"
                      alt="alt text"
                ></p>
<ul>
<li>当前小节内容配置，支持生成多选项，与或非判断，节点回退，表演数据配置，文本配置，立绘配置，Live2d配置，出场动画配置，自适应立绘位置等内容</li>
</ul>
]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-HybridCLR</title>
    <url>/2024/09/05/Unity-Hybridclr/</url>
    <content><![CDATA[<h2 id="HybridCLR（huatuo）-介绍"><a href="#HybridCLR（huatuo）-介绍" class="headerlink" title="HybridCLR（huatuo） 介绍"></a>HybridCLR（huatuo） 介绍</h2><ul>
<li>HybridCLR是一个特性完整、零成本、高性能、低内存的近乎完美的Unity全平台原生c#热更新解决方案。</li>
</ul>
<p>HybridCLR扩充了il2cpp运行时代码，使它由纯AOT runtime变成AOT+Interpreter 混合runtime，进而原生支持动态加载assembly，从底层彻底支持了热更新。使用HybridCLR技术的游戏不仅能在Android平台，也能在IOS、Consoles、WebGL等所有il2cpp支持的平台上高效运行。</p>
<p>由于HybridCLR对ECMA-335规范 的良好支持以及对Unity开发工作流的高度兼容，Unity项目在接入HybridCLR后，可以几乎无缝地获得C#代码热更新的能力，开发者不需要改变日常开发习惯和要求。HybridCLR首次实现了将Unity平台的全平台代码热更新方案的工程难度降到几乎为零的水平。</p>
<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>ECMA-335规范 </summary>
              <div class='content'>
              <p><a class="link"   href="https://www.ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf" >https://www.ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
              </div>
            </details>

<h2 id="支持的版本与平台"><a href="#支持的版本与平台" class="headerlink" title="支持的版本与平台"></a>支持的版本与平台</h2><ul>
<li>支持2019.4.x、2020.3.x、2021.3.x、2022.3.x、2023.2.x、6000.x.y全系列LTS版本</li>
<li>支持所有il2cpp支持的平台</li>
<li>支持团结引擎和鸿蒙平台</li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul>
<li>在unity的il2cpp之类的AOT runtime额外提供了interpreter模块，将它们由纯AOT运行时改造为”AOT + Interpreter”混合运行方式。</li>
<li>实现了一个高效的元数据(dll)解析库</li>
<li>改造了元数据管理模块，实现了元数据的动态注册</li>
<li>实现了一个IL指令集到自定义的寄存器指令集的compiler</li>
<li>实现了一个高效的寄存器解释器</li>
<li>额外提供大量的instinct函数，提升解释器性能</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/Unity-Hybridclr/image.png"
                      alt="working principle"
                ></p>
<p><strong>推荐兄弟们看作者的解析：</strong><a class="link"   href="https://hybridclr.doc.code-philosophy.com/blog" >https://hybridclr.doc.code-philosophy.com/blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>HybridCLR</category>
      </categories>
      <tags>
        <tag>热更框架</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 内置模块</title>
    <url>/2024/08/09/UnityGameframework-01/</url>
    <content><![CDATA[<h3 id="Game-Framework-内置模块"><a href="#Game-Framework-内置模块" class="headerlink" title="Game Framework 内置模块"></a>Game Framework 内置模块</h3><p><code>Game Framework</code> 是一个基于 Unity 引擎的游戏框架，提供了多种模块封装了游戏开发过程中常用的功能。以下是框架中包含的 19 个内置模块的详细描述：</p>
<h4 id="来自：https-github-com-EllanJiang-GameFramework"><a href="#来自：https-github-com-EllanJiang-GameFramework" class="headerlink" title="来自：https://github.com/EllanJiang/GameFramework/"></a>来自：<a class="link"   href="https://github.com/EllanJiang/GameFramework/" >https://github.com/EllanJiang/GameFramework/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><h4 id="1-全局配置-Config"><a href="#1-全局配置-Config" class="headerlink" title="1. 全局配置 (Config)"></a>1. 全局配置 (Config)</h4><ul>
<li>全局配置模块用于存储一些全局的只读游戏配置数据，例如玩家初始速度、游戏初始音量等。这些数据通常在游戏启动时加载，并在整个游戏过程中保持不变。</li>
</ul>
<h4 id="2-数据结点-Data-Node"><a href="#2-数据结点-Data-Node" class="headerlink" title="2. 数据结点 (Data Node)"></a>2. 数据结点 (Data Node)</h4><ul>
<li>数据结点模块允许开发者以树状结构的形式保存任意类型的数据，用于管理游戏运行时的各种数据。例如，可以将游戏的配置数据、运行状态等信息组织在一个树状结构中，方便读取和修改。</li>
</ul>
<h4 id="3-数据表-Data-Table"><a href="#3-数据表-Data-Table" class="headerlink" title="3. 数据表 (Data Table)"></a>3. 数据表 (Data Table)</h4><ul>
<li>数据表模块允许开发者使用表格（如 Microsoft Excel）形式的配置文件来管理游戏数据。数据表的格式是可以自定义的，并且在游戏中通过此模块使用这些数据表。</li>
</ul>
<h4 id="4-调试器-Debugger"><a href="#4-调试器-Debugger" class="headerlink" title="4. 调试器 (Debugger)"></a>4. 调试器 (Debugger)</h4><ul>
<li>调试器模块在游戏在 Unity 编辑器中运行或以 Development 方式发布运行时提供调试器窗口，便于查看运行时日志、调试信息等。开发者可以方便地将自己的功能注册到调试器窗口上并使用。</li>
</ul>
<h4 id="5-下载-Download"><a href="#5-下载-Download" class="headerlink" title="5. 下载 (Download)"></a>5. 下载 (Download)</h4><ul>
<li>下载模块提供文件下载功能，支持断点续传，并可指定允许几个下载器进行同时下载。这个模块在更新资源时会主动被调用。</li>
</ul>
<h4 id="6-实体-Entity"><a href="#6-实体-Entity" class="headerlink" title="6. 实体 (Entity)"></a>6. 实体 (Entity)</h4><ul>
<li>实体模块将游戏场景中动态创建的一切物体定义为实体。此模块提供管理实体和实体组的功能，如显示隐藏实体、挂接实体（如挂接武器、坐骑，或者抓起另一个实体）等。实体使用结束后可以不立刻销毁，从而等待下一次重新使用。</li>
</ul>
<h4 id="7-事件-Event"><a href="#7-事件-Event" class="headerlink" title="7. 事件 (Event)"></a>7. 事件 (Event)</h4><ul>
<li>事件模块提供游戏逻辑监听、抛出事件的机制。<code>Game Framework</code> 中的很多模块在完成操作后都会抛出内置事件，监听这些事件将大大解除游戏逻辑之间的耦合。开发者也可以定义自己的游戏逻辑事件。</li>
</ul>
<h4 id="8-文件系统-File-System"><a href="#8-文件系统-File-System" class="headerlink" title="8. 文件系统 (File System)"></a>8. 文件系统 (File System)</h4><ul>
<li>文件系统模块使用类似磁盘的概念对零散文件进行集中管理，优化资源加载时产生的内存分配，甚至可以对资源进行局部片段加载，这些都将极大提升资源加载时的性能。</li>
</ul>
<h4 id="9-有限状态机-FSM"><a href="#9-有限状态机-FSM" class="headerlink" title="9. 有限状态机 (FSM)"></a>9. 有限状态机 (FSM)</h4><ul>
<li>有限状态机模块提供创建、使用和销毁有限状态机的功能，一些适用于有限状态机机制的游戏逻辑，使用此模块将是一个不错的选择。</li>
</ul>
<h4 id="10-本地化-Localization"><a href="#10-本地化-Localization" class="headerlink" title="10. 本地化 (Localization)"></a>10. 本地化 (Localization)</h4><ul>
<li>本地化模块提供本地化功能，也就是多语言支持。<code>Game Framework</code> 不仅支持文本的本地化，还支持任意资源的本地化，比如游戏中释放烟花特效也可以做出几个多国语言的版本。</li>
</ul>
<h4 id="11-网络-Network"><a href="#11-网络-Network" class="headerlink" title="11. 网络 (Network)"></a>11. 网络 (Network)</h4><ul>
<li>网络模块提供使用 Socket 长连接的功能，当前支持 TCP 协议，同时兼容 IPv4 和 IPv6 两个版本。开发者可以同时建立多个连接与多个服务器进行通信，支持接入各种协议库。</li>
</ul>
<h4 id="12-对象池-Object-Pool"><a href="#12-对象池-Object-Pool" class="headerlink" title="12. 对象池 (Object Pool)"></a>12. 对象池 (Object Pool)</h4><ul>
<li>对象池模块提供对象缓存池的功能，避免频繁地创建和销毁各种游戏对象，提高游戏性能。除了 <code>Game Framework</code> 自身使用了对象池，开发者还可以很方便地创建和管理自己的对象池。</li>
</ul>
<h4 id="13-流程-Procedure"><a href="#13-流程-Procedure" class="headerlink" title="13. 流程 (Procedure)"></a>13. 流程 (Procedure)</h4><ul>
<li>流程模块是贯穿游戏运行时整个生命周期的有限状态机。通过流程将不同的游戏状态进行解耦是一个非常好的习惯。对于不同类型的游戏，可以根据需要定制各种流程。</li>
</ul>
<h4 id="14-资源-Resource"><a href="#14-资源-Resource" class="headerlink" title="14. 资源 (Resource)"></a>14. 资源 (Resource)</h4><ul>
<li>资源模块提供了一套完整的异步加载资源体系，避免使用同步加载方式。这个模块只提供了异步加载资源的接口，并支持默认的内存管理策略。</li>
</ul>
<h4 id="15-场景-Scene"><a href="#15-场景-Scene" class="headerlink" title="15. 场景 (Scene)"></a>15. 场景 (Scene)</h4><ul>
<li>场景模块提供场景管理的功能，可以同时加载多个场景，也可以随时卸载任何一个场景，从而很容易地实现场景的分部加载。</li>
</ul>
<h4 id="16-配置-Setting"><a href="#16-配置-Setting" class="headerlink" title="16. 配置 (Setting)"></a>16. 配置 (Setting)</h4><ul>
<li>配置模块以键值对的形式存储玩家数据，对 <code>UnityEngine.PlayerPrefs</code> 进行封装，也可以将这些数据直接存储在磁盘上。</li>
</ul>
<h4 id="17-声音-Sound"><a href="#17-声音-Sound" class="headerlink" title="17. 声音 (Sound)"></a>17. 声音 (Sound)</h4><ul>
<li>声音模块提供管理声音和声音组的功能，开发者可以自定义一个声音的音量、是 2D 声音还是 3D 声音，甚至是直接绑定到某个实体上跟随实体移动。</li>
</ul>
<h4 id="18-界面-UI"><a href="#18-界面-UI" class="headerlink" title="18. 界面 (UI)"></a>18. 界面 (UI)</h4><ul>
<li>界面模块提供管理界面和界面组的功能，如显示隐藏界面、激活界面、改变界面层级等。无论使用 Unity 内置的 uGUI 还是其他类型的 UI 插件，只要派生自 <code>UIFormLogic</code> 类并实现自己的界面类即可使用。</li>
</ul>
<h4 id="19-Web-请求-Web-Request"><a href="#19-Web-请求-Web-Request" class="headerlink" title="19. Web 请求 (Web Request)"></a>19. Web 请求 (Web Request)</h4><ul>
<li>Web 请求模块提供使用短连接的功能，可以用 Get 或者 Post 方法向服务器发送请求并获取响应数据，可指定允许几个 Web 请求器进行同时请求。</li>
</ul>
<p>因为模块比较多，所以我需要分模块来学习。</p>
<hr>
<h3 id="引用：EllanJiang-Github内容"><a href="#引用：EllanJiang-Github内容" class="headerlink" title="引用：EllanJiang Github内容"></a>引用：EllanJiang Github内容</h3><a class="button  center large" href='https://github.com/EllanJiang' title='Github'><i class='fa fa-thumbs-up'></i> Github</a>
<a class="button  center large" href='https://github.com/EllanJiang/StarForce/archive/refs/heads/master.zip' title='Unity示例项目下载'><i class='fa-solid fa-download'></i> Unity示例项目下载</a>
<a class="button  center large" href='https://github.com/EllanJiang/GameFramework/archive/refs/heads/master.zip' title='GameFramework源码下载'><i class='fa-solid fa-download'></i> GameFramework源码下载</a>
<a class="button  center large" href='https://github.com/EllanJiang/GameFramework/archive/refs/heads/master.zip' title='GameFramework（GF层）源码下载'><i class='fa-solid fa-download'></i> GameFramework（GF层）源码下载</a>
<a class="button  center large" href='https://github.com/EllanJiang/UnityGameFramework/archive/refs/heads/master.zip' title='GameFramework（UGF层|将GF层封装成了动态链接库）示例下载'><i class='fa-solid fa-download'></i> GameFramework（UGF层|将GF层封装成了动态链接库）示例下载</a>

<h3 id="参考文档：花桑大佬"><a href="#参考文档：花桑大佬" class="headerlink" title="参考文档：花桑大佬"></a>参考文档：花桑大佬</h3><a class="button  center large" href='https://www.drflower.top/' title='博客'><i class='fa fa-thumbs-up'></i> 博客</a>

<a class="button  center large" href='https://github.com/DrFlower/TowerDefense-GameFramework-Demo/archive/refs/heads/master.zip' title='塔防DEMO'><i class='fa fa-thumbs-up'></i> 塔防DEMO</a>

<h4 id="以上内容只为了方便学习与下载集合到一起"><a href="#以上内容只为了方便学习与下载集合到一起" class="headerlink" title="以上内容只为了方便学习与下载集合到一起!!!!"></a><font color="red">以上内容只为了方便学习与下载集合到一起!!!!</font></h4>]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 状态机</title>
    <url>/2024/08/16/UnityGameframework-Fsm/</url>
    <content><![CDATA[<h1 id="FSM状态机-有限状态机"><a href="#FSM状态机-有限状态机" class="headerlink" title="FSM状态机(有限状态机)"></a>FSM状态机(有限状态机)</h1><h2 id="什么是有限状态机"><a href="#什么是有限状态机" class="headerlink" title="什么是有限状态机"></a>什么是有限状态机</h2><ul>
<li>在有限的状态合集里切换不同状态，执行不同逻辑，通常用于玩家控制，怪物AI，游戏流程控制等</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-FSM.drawio.png"
                      alt="UML 类图"
                ></p>
<ul>
<li>状态机实现包括三个部分，FsmBase,FsmManager,FsmState,Fsm,IFsm,IFsmMananger</li>
<li>FsmBase,IFsm,Fsm:状态机</li>
<li>FsmManager,IFsmManager:状态管理器，在整体架构中，每个模块都存在一个管理器</li>
<li>FsmState:单个状态</li>
</ul>
<h3 id="FsmState"><a href="#FsmState" class="headerlink" title="FsmState"></a>FsmState</h3><ul>
<li><p>这里指状态机管理的不同的状态</p>
</li>
<li><p>OnInit-&gt;OnEnter-&gt;OnUpdate-&gt;OnLeave-&gt;OnDestroy作为贯穿整个状态的生命周期函数</p>
</li>
<li><p>多态函数ChangeState提供切换状态逻辑，实际上是通过传入的状态机调用状态机的ChangeState</p>
</li>
</ul>
<h3 id="FsmBase"><a href="#FsmBase" class="headerlink" title="FsmBase"></a>FsmBase</h3><ul>
<li><p>有限状态机基类</p>
</li>
<li><p>提供通用属性，通用函数</p>
</li>
</ul>
<h3 id="Fsm"><a href="#Fsm" class="headerlink" title="Fsm"></a>Fsm</h3><ul>
<li><p>有限状态机继承FsmBase</p>
</li>
<li><p>提供Create函数创建状态机(多态)<br>– 名称 name<br>– 持有者 owner<br>– 状态集合 states []:FsmState&lt;T&gt; || states:List&lt;FsmState &lt;T&gt;&gt;<br>– 从引用池获取引用(懒加载) -&gt; 初始化状态机属性 -&gt; 遍历状态列表中的初始化函数OnInit</p>
</li>
<li><p>提供Clear函数清理状态机<br>– 退出当前状态 -&gt; 遍历状态列表执行OnDestroy -&gt; 清理状态字典 -&gt; 将变量类返回引用池 -&gt;清空存放变量类字典的数据 -&gt; 清空属性并设置状态机标志</p>
<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>变量类 ：Variable </summary>
              <div class='content'>
              <ul><li><p>GameFramework.Runtime.Variable : IReference</p></li><li><p>Type:获取变量类型</p></li><li><p>GetValue:获取变量值</p></li><li><p>SetValue:设置变量值</p></li><li><p>Clear:清理变量值</p></li><li><p>可以在创建新的变量类型时继承该类扩写，例如流程模块中：<br>– VarInt32 继承了 Variable,并且提供隐式转换操作符<br>– public static implicit operator VarInt32(int value)<br>– public static implicit operator int(VarInt32 value)</p></li></ul>
              </div>
            </details>
</li>
<li><p>提供Start开始状态机<br>– stateType 传入状态类型执行OnEnter</p>
</li>
<li><p>Update轮询<br>–每帧调用Update,增加当前状态机执行时间，通过m_CurrentStateTime</p>
</li>
<li><p>GetState 和 GetAllState 可以获取当前注册进状态机的状态</p>
</li>
<li><p>GetData,HasData,SetData,MoveData，不同状态的数据交互可以使用这几个函数，所有状态的数据都存放在m_Datas中</p>
</li>
<li><p>Shutdown会将引用归还引用池,此方法由FsmManager调用</p>
</li>
</ul>
<h3 id="FsmManager"><a href="#FsmManager" class="headerlink" title="FsmManager"></a>FsmManager</h3><h4 id="1-类定义"><a href="#1-类定义" class="headerlink" title="1. 类定义"></a>1. 类定义</h4><ul>
<li><strong>命名空间</strong>: <code>GameFramework.Fsm</code></li>
<li><strong>访问级别</strong>: <code>internal sealed</code>，即该类仅在其所在的程序集中可见，且不能被继承。</li>
</ul>
<h4 id="2-字段"><a href="#2-字段" class="headerlink" title="2. 字段"></a>2. 字段</h4><ul>
<li><code>m_Fsms</code>: <code>Dictionary&lt;TypeNamePair, FsmBase&gt;</code>，用于存储有限状态机的字典，键是 <code>TypeNamePair</code>，值是 <code>FsmBase</code>。</li>
<li><code>m_TempFsms</code>: <code>List&lt;FsmBase&gt;</code>，用于临时存储有限状态机的列表，主要用于 <code>Update</code> 方法中遍历有限状态机时使用。</li>
</ul>
<h4 id="3-属性"><a href="#3-属性" class="headerlink" title="3. 属性"></a>3. 属性</h4><ul>
<li><code>Priority</code>: 获取模块优先级，值为 <code>60</code>。优先级较高的模块会优先进行轮询，并且关闭操作会在其他模块之后进行。</li>
<li><code>Count</code>: 获取有限状态机的数量。</li>
</ul>
<h4 id="4-方法"><a href="#4-方法" class="headerlink" title="4. 方法"></a>4. 方法</h4><h5 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h5><ul>
<li><code>HasFsm&lt;T&gt;()</code>: 检查是否存在某类型的有限状态机。</li>
<li><code>HasFsm(Type ownerType)</code>: 检查是否存在指定类型的有限状态机。</li>
<li><code>HasFsm&lt;T&gt;(string name)</code>: 检查是否存在某类型和名称的有限状态机。</li>
<li><code>HasFsm(Type ownerType, string name)</code>: 检查是否存在指定类型和名称的有限状态机。</li>
<li><code>GetFsm&lt;T&gt;()</code>: 获取某类型的有限状态机。</li>
<li><code>GetFsm(Type ownerType)</code>: 获取指定类型的有限状态机。</li>
<li><code>GetFsm&lt;T&gt;(string name)</code>: 获取某类型和名称的有限状态机。</li>
<li><code>GetFsm(Type ownerType, string name)</code>: 获取指定类型和名称的有限状态机。</li>
<li><code>GetAllFsms()</code>: 获取所有有限状态机，返回一个 <code>FsmBase[]</code> 数组。</li>
<li><code>GetAllFsms(List&lt;FsmBase&gt; results)</code>: 获取所有有限状态机，并将它们存储在传入的 <code>List&lt;FsmBase&gt;</code> 中。</li>
<li><code>CreateFsm&lt;T&gt;(T owner, params FsmState&lt;T&gt;[] states)</code>: 创建某类型的有限状态机，并指定状态集合。</li>
<li><code>CreateFsm&lt;T&gt;(string name, T owner, params FsmState&lt;T&gt;[] states)</code>: 创建某类型和名称的有限状态机，并指定状态集合。</li>
<li><code>CreateFsm&lt;T&gt;(T owner, List&lt;FsmState&lt;T&gt;&gt; states)</code>: 创建某类型的有限状态机，并指定状态集合（以列表形式）。</li>
<li><code>CreateFsm&lt;T&gt;(string name, T owner, List&lt;FsmState&lt;T&gt;&gt; states)</code>: 创建某类型和名称的有限状态机，并指定状态集合（以列表形式）。</li>
<li><code>DestroyFsm&lt;T&gt;()</code>: 销毁某类型的有限状态机。</li>
<li><code>DestroyFsm(Type ownerType)</code>: 销毁指定类型的有限状态机。</li>
<li><code>DestroyFsm&lt;T&gt;(string name)</code>: 销毁某类型和名称的有限状态机。</li>
<li><code>DestroyFsm(Type ownerType, string name)</code>: 销毁指定类型和名称的有限状态机。</li>
<li><code>DestroyFsm&lt;T&gt;(IFsm&lt;T&gt; fsm)</code>: 销毁某类型的指定有限状态机。</li>
<li><code>DestroyFsm(FsmBase fsm)</code>: 销毁指定的有限状态机。</li>
</ul>
<h5 id="内部方法"><a href="#内部方法" class="headerlink" title="内部方法"></a>内部方法</h5><ul>
<li><code>Update(float elapseSeconds, float realElapseSeconds)</code>: 轮询有限状态机管理器，用于更新所有有限状态机的状态。</li>
<li><code>Shutdown()</code>: 关闭并清理有限状态机管理器，销毁所有有限状态机。</li>
<li><code>InternalHasFsm(TypeNamePair typeNamePair)</code>: 内部方法，检查是否存在指定 <code>TypeNamePair</code> 的有限状态机。</li>
<li><code>InternalGetFsm(TypeNamePair typeNamePair)</code>: 内部方法，获取指定 <code>TypeNamePair</code> 的有限状态机。</li>
<li><code>InternalDestroyFsm(TypeNamePair typeNamePair)</code>: 内部方法，销毁指定 <code>TypeNamePair</code> 的有限状态机。</li>
</ul>
<h4 id="5-功能"><a href="#5-功能" class="headerlink" title="5. 功能"></a>5. 功能</h4><p><code>FsmManager</code> 是有限状态机的管理器，负责创建、获取、销毁和轮询有限状态机。它为游戏框架提供了一个集中的有限状态机管理功能，并确保各个状态机能够顺利运行和清理。</p>
]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 整体架构</title>
    <url>/2024/08/13/UnityGameframework-02/</url>
    <content><![CDATA[<h3 id="Game-Framework-整体架构"><a href="#Game-Framework-整体架构" class="headerlink" title="Game Framework 整体架构"></a>Game Framework 整体架构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-GAME.drawio.png"
                      alt="架构图"
                ></p>
<ul>
<li>底层使用GF原生模块</li>
<li>中间层结合了UGF以及Unity原生层</li>
<li>最上层则是Game层，关注游戏玩法逻辑等内容</li>
</ul>
<hr>
<h3 id="GF层"><a href="#GF层" class="headerlink" title="GF层"></a>GF层</h3><ul>
<li>提供了独立的模块，所有模块继承抽象类GameFrameworkModule，所有模块不依赖任何Unity的实现</li>
</ul>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul>
<li>GameFrameworkModule抽象出了Priority,Update,Shutdown<br>– Proiority 决定模块在框架中轮询的优先级<br>– Update 对应模块需要轮询的逻辑<br>– Shutdown 关闭并清理游戏框架模块</li>
</ul>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><ul>
<li>GameFrameworkModule提供了所有模块需要的基础接口，通过BaseComp轮询所有Update<br>– 如果模块需要引擎提供的参数，可以在UGF层初始化模块时传入<br>– 如果模块需要调用引擎原生的功能，框架抽象出了Helper辅助器，辅助器继承MonoBehaviour</li>
</ul>
<h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><ul>
<li>每个模块实现对应模块的接口<br>– 如UIManager实现接口IUIManager,即XXXManager实现IXXXManager，降低耦合度，可替换性强</li>
</ul>
<h3 id="UGF层"><a href="#UGF层" class="headerlink" title="UGF层"></a>UGF层</h3><h4 id="UGF层与GF层的关系"><a href="#UGF层与GF层的关系" class="headerlink" title="UGF层与GF层的关系"></a>UGF层与GF层的关系</h4><ul>
<li>UGF层将模块组件化，实现需要依赖引擎功能的模块都存在一个XXXComponent类</li>
</ul>
<h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><ul>
<li>XXXCompnent 继承 GameFrameworkComponent 继承 MonoBehaviour</li>
</ul>
<h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><ul>
<li>GameFrameworkComponent 实现了Awake函数，在对象生命周期开始时注册该组件到GameEntry组件链表内并创建IXXXMananger的实例,且方便其他地方通过GameEntry访问Component</li>
</ul>
<h5 id="-5"><a href="#-5" class="headerlink" title=""></a></h5><ul>
<li>所有被注册到GameEntry内的组件都会在Basecomp中轮询组件的Update函数</li>
</ul>
<h5 id="-6"><a href="#-6" class="headerlink" title=""></a></h5><ul>
<li>XXXComponent 没有直接依赖模块类，而是依赖模块抽象接口</li>
</ul>
<h5 id="-7"><a href="#-7" class="headerlink" title=""></a></h5><ul>
<li>例如：UIComponent-&gt;IUIMnanger</li>
</ul>
<h5 id="-8"><a href="#-8" class="headerlink" title=""></a></h5><ul>
<li>组件与模块之间实现松耦合</li>
</ul>
<h5 id="-9"><a href="#-9" class="headerlink" title=""></a></h5><ul>
<li>通过替换接口实现更容易进行单元测试</li>
</ul>
<h5 id="-10"><a href="#-10" class="headerlink" title=""></a></h5><ul>
<li>符合SOLID-DIP:鼓励依赖抽象而不是实现</li>
</ul>
<h5 id="-11"><a href="#-11" class="headerlink" title=""></a></h5><ul>
<li>结合UnityEditor扩展序列化模块属性到Inspector进行可视化配置</li>
</ul>
<h4 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Schedule.drawio.png"
                      alt="alt text"
                ></p>
<ul>
<li><p>Unity 场景中脚本必须继承MonoBehaviour,所有模块可以通过继承GameFrameworkComponent挂载到场景的对象中,而组件中属性也存在GameFramework中依赖的模块</p>
</li>
<li><p>游戏启动会检查场景中GameFrameworkComponent类型并执行Awake初始化</p>
</li>
</ul>
<h5 id="-12"><a href="#-12" class="headerlink" title=""></a></h5><ul>
<li>执行GameEntry.RegisterComponent注册当前组件到s_GameFrameworkComponents,方便通过GameEntry访问组件</li>
</ul>
<h5 id="-13"><a href="#-13" class="headerlink" title=""></a></h5><ul>
<li>代码中是通过 GetModule&lt;T&gt; 获取模块,当GameFrameworkModule中s_GameFrameworkModules链表存在模块时会直接返回对应模块,如果不存在则通过反射创建</li>
</ul>
<h5 id="-14"><a href="#-14" class="headerlink" title=""></a></h5><ul>
<li>实际上是调用 GetModule&lt;T&gt; 时设置了T的类型,而我们传入的是接口IXXXManager,源码中通过裁剪字符串获得当前模块类型,这可能也是规范命名的好处</li>
</ul>
<h5 id="-15"><a href="#-15" class="headerlink" title=""></a></h5><ul>
<li>并不是所有组件里的模块都会在Awake中初始化，例如ResourceComponentAwake中只注册了组件，具体为什么后续再分析</li>
</ul>
<h5 id="-16"><a href="#-16" class="headerlink" title=""></a></h5><ul>
<li>在Start中,框架初始化所有组件，前面说到GameFrameworkModule的模块都存在优先级属性Priority,优先级越高创建越早轮询就越早,其中某些模块会创建以及设置辅助器<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>辅助器 </summary>
              <div class='content'>
              <ul><li><p><strong>简化代码</strong>：辅助器可以封装复杂的操作或常见的功能，使主逻辑代码更简洁。例如，提供常用的字符串操作、数据转换等功能。</p></li><li><p><strong>提升可读性</strong>：通过将常用的代码模式封装到辅助器中，可以提高代码的可读性和维护性，避免重复的代码块。</p></li><li><p><strong>增强功能</strong>：辅助器可以提供额外的功能，比如日志记录、配置管理或错误处理，增强主系统的功能。</p></li><li><p><strong>提高复用性</strong>：将通用功能提取到辅助器中，能够在多个地方复用，减少冗余代码。</p></li><li><p><strong>分离关注点</strong>：辅助器帮助将代码的不同职责分离，使主业务逻辑与具体的实现细节解耦。</p></li></ul>
              </div>
            </details></li>
</ul>
<h5 id="-17"><a href="#-17" class="headerlink" title=""></a></h5><ul>
<li>Procedure 是框架中管理整个游戏流程的模块,跟别的组件不同的是，ProcedureComponent的Start函数通过协程执行并在初始化组件以及添加流程到状态机后延迟一帧启动流程。</li>
<li>游戏启动的第二帧调用ProcedureManager.StartProcedure -&gt; ProcedureBase.OnEnter</li>
</ul>
<h4 id="GameFramework-Update流程"><a href="#GameFramework-Update流程" class="headerlink" title="GameFramework Update流程"></a>GameFramework Update流程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Update.drawio.png"
                      alt="GameUpdate"
                ></p>
<h5 id="-18"><a href="#-18" class="headerlink" title=""></a></h5><ul>
<li>引擎调用Monobehaviour的Update</li>
</ul>
<h5 id="-19"><a href="#-19" class="headerlink" title=""></a></h5><ul>
<li>BaseComponent作为所有模块Update的入口，其中的Update方法按照模块优先级调用模块内的Update (GameFrameworkEntry类通过s_GameFrameworkModules保存了所有已创建的模块)</li>
</ul>
<h4 id="GameFramework-ShutDown流程"><a href="#GameFramework-ShutDown流程" class="headerlink" title="GameFramework ShutDown流程"></a>GameFramework ShutDown流程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Shutdown.drawio.png"
                      alt="GameUpdate"
                ></p>
<ul>
<li>业务层调用GameEntry.ShutDown(ShutdownType)</li>
</ul>
<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>ShutdownType </summary>
              <div class='content'>
              <ul><li><p><strong>仅关闭游戏框架。</strong>：None &#x3D; 0</p></li><li><p><strong>关闭游戏框架并重启游戏。</strong>：Restart</p></li><li><p><strong>关闭游戏框架并退出游戏。</strong>：Quit</p></li></ul>
              </div>
            </details>

<ul>
<li>GameEntry.ShutDown调用了BaseComponent的Shutdown函数</li>
<li>BaseComponent的Shutdown调用了Object.Destroy()销毁自身GameObject;(BaseComponent extend GameframeworkComponent)</li>
<li>释放模块注册在GameEntry中的引用</li>
<li>根据传入的ShutdownType执行LoadScene或Application.Quit</li>
<li>Monobehavior 对象被执行Destroy后在当前帧结束后才会调用被执行对象的OnDestroy</li>
<li>BaseComponent销毁事件 -&gt; 调用GameFrameworkEntry.Shutdown -&gt; 逆序遍历链表调用GameFrameworkModule.Shutdown</li>
</ul>
<h3 id="参考文档：花桑大佬"><a href="#参考文档：花桑大佬" class="headerlink" title="参考文档：花桑大佬"></a>参考文档：花桑大佬</h3><a class="button  center large" href='https://www.drflower.top/' title='博客'><i class='fa fa-thumbs-up'></i> 博客</a>

]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Gameframework 序言</title>
    <url>/2024/08/09/UnityGameframework_00/</url>
    <content><![CDATA[<h2 id="关于项目使用GameframeWork的记录"><a href="#关于项目使用GameframeWork的记录" class="headerlink" title="关于项目使用GameframeWork的记录"></a>关于项目使用GameframeWork的记录</h2><h3 id="为什么使用GameframeWork？"><a href="#为什么使用GameframeWork？" class="headerlink" title="为什么使用GameframeWork？"></a>为什么使用GameframeWork？</h3><ul>
<li><strong>作用</strong>：保证项目的支撑性以及约束性;</li>
<li><strong>为什么不选择自研</strong>：目前因为是新公司，只有两个开发，如果使用自研框架，就算可以保证框架的质量也需要很长的时间，而且我并没有这个能力，调研了不同的框架，像ET、GameFrameWork，都需要很长的时间，需要不断迭代，不断更新，ET到目前已经超过了五年，GameFrameWork从2013-2021年。</li>
</ul>
<h2 id="GameFramework-和-ET-的区别"><a href="#GameFramework-和-ET-的区别" class="headerlink" title="GameFramework 和 ET 的区别"></a>GameFramework 和 ET 的区别</h2><h3 id="1-设计理念与架构"><a href="#1-设计理念与架构" class="headerlink" title="1. 设计理念与架构"></a>1. 设计理念与架构</h3><h4 id="GameFramework"><a href="#GameFramework" class="headerlink" title="GameFramework"></a>GameFramework</h4><ul>
<li><strong>轻量级框架</strong>：GameFramework 是一个轻量级的游戏框架，专注于提供基础的游戏开发功能，如资源管理、UI 管理、事件系统、网络通信、对象池、配置管理等。</li>
<li><strong>模块化设计</strong>：采用模块化设计，开发者可以根据项目需求选择需要的模块，不必使用全部功能，提升了灵活性和扩展性。</li>
<li><strong>Unity 集成</strong>：主要为 Unity 引擎设计，旨在简化 Unity 游戏开发的常见任务，提供了许多 Unity 专用的工具和组件。</li>
</ul>
<h4 id="ET-ET-Framework"><a href="#ET-ET-Framework" class="headerlink" title="ET (ET Framework)"></a>ET (ET Framework)</h4><ul>
<li><strong>高性能框架</strong>：ET 是一个高性能的分布式游戏服务器框架，特别适用于大规模在线游戏的服务器端开发。它基于 C# 和 .NET 技术栈，支持多线程和多进程。</li>
<li><strong>Actor 模型</strong>：使用 Actor 模型来处理并发和通信，将复杂的多线程编程问题简化为消息传递的方式，非常适合处理大规模并发任务。</li>
<li><strong>分布式系统支持</strong>：提供了强大的分布式系统支持，可以轻松搭建跨服务器、跨进程的系统，适用于大型多人在线游戏（MMO）等需要分布式架构的场景。</li>
</ul>
<h3 id="2-功能与特性"><a href="#2-功能与特性" class="headerlink" title="2. 功能与特性"></a>2. 功能与特性</h3><h4 id="GameFramework-的功能与特性"><a href="#GameFramework-的功能与特性" class="headerlink" title="GameFramework 的功能与特性"></a>GameFramework 的功能与特性</h4><ul>
<li><strong>面向客户端</strong>：主要功能集中在客户端游戏开发，如资源管理、UI 系统、输入管理、声音管理、以及与 Unity 引擎的深度集成。</li>
<li><strong>扩展性</strong>：通过插件系统，开发者可以自定义和扩展框架的功能，适合各种中小型游戏项目。</li>
<li><strong>简易上手</strong>：对于使用 Unity 的开发者来说，GameFramework 的上手门槛较低，易于快速构建游戏原型。</li>
</ul>
<h4 id="ET"><a href="#ET" class="headerlink" title="ET"></a>ET</h4><ul>
<li><strong>面向服务端</strong>：ET 更侧重于服务端的开发，提供了强大的网络通信、分布式处理、负载均衡等功能，适合需要高并发、高可靠性要求的游戏。</li>
<li><strong>Actor 模型的并发处理</strong>：利用 Actor 模型处理并发问题，简化了复杂的多线程编程，并提高了系统的可扩展性和可维护性。</li>
<li><strong>热更新支持</strong>：ET 支持服务端的热更新，可以在不重启服务器的情况下动态更新代码和数据，非常适合长期运营的大型游戏项目。</li>
</ul>
<h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><h4 id="GameFramework-的应用场景"><a href="#GameFramework-的应用场景" class="headerlink" title="GameFramework 的应用场景"></a>GameFramework 的应用场景</h4><ul>
<li>适合中小型 Unity 项目，尤其是单机游戏或简单的联网游戏。对于需要快速开发和原型验证的项目，GameFramework 提供了足够的功能。</li>
<li>对于那些不需要复杂服务器架构的项目，它是一个非常好的选择。</li>
</ul>
<h4 id="ET-的应用场景"><a href="#ET-的应用场景" class="headerlink" title="ET 的应用场景"></a>ET 的应用场景</h4><ul>
<li>适合大型多人在线游戏（如 MMORPG）、大规模网络游戏，以及对服务端性能和稳定性要求较高的项目。</li>
<li>对于需要分布式系统支持、复杂逻辑处理和高并发处理的项目，ET 是一个强大的选择。</li>
</ul>
<h3 id="4-社区与支持"><a href="#4-社区与支持" class="headerlink" title="4. 社区与支持"></a>4. 社区与支持</h3><h4 id="GameFramework-的社区与支持"><a href="#GameFramework-的社区与支持" class="headerlink" title="GameFramework 的社区与支持"></a>GameFramework 的社区与支持</h4><ul>
<li>社区活跃，适合 Unity 开发者。提供了较为丰富的文档和教程，有许多开发者在使用和贡献。</li>
</ul>
<h4 id="ET-的社区与支持"><a href="#ET-的社区与支持" class="headerlink" title="ET 的社区与支持"></a>ET 的社区与支持</h4><ul>
<li>社区主要集中在服务端开发人员，讨论的内容多与服务器架构、高并发、分布式系统相关。ET 的文档较为完善，但由于其复杂性，学习曲线可能较陡。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>GameFramework</strong> 更适合那些需要快速开发、依赖 Unity 的中小型游戏项目，提供了良好的客户端开发支持。</li>
<li><strong>ET</strong> 则适合那些需要构建复杂的分布式系统、大型在线游戏的项目，特别是在服务端开发和高并发处理方面表现出色。</li>
</ul>
]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityGameframework 流程模块</title>
    <url>/2024/08/16/UnityGameframework-Procedure/</url>
    <content><![CDATA[<h2 id="Procedure-流程"><a href="#Procedure-流程" class="headerlink" title="Procedure 流程"></a>Procedure 流程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-Procedure.drawio.png"
                      alt="GameProcedure"
                ></p>
<h2 id="GF流程模块"><a href="#GF流程模块" class="headerlink" title="GF流程模块"></a>GF流程模块</h2><ul>
<li>流程在实现上其实是对有限状态机的一个封装，这也是为什么先看状态机的实现，而不是先看流程模块</li>
</ul>
<h2 id="GF官方定义（来自Github介绍）"><a href="#GF官方定义（来自Github介绍）" class="headerlink" title="GF官方定义（来自Github介绍）"></a>GF官方定义（来自Github介绍）</h2><ul>
<li>是贯穿游戏运行时整个生命周期的有限状态机。通过流程，将不同的游戏状态进行解耦将是一个非常好的习惯。对于网络游戏，你可能需要如检查资源流程、更新资源流程、检查服务器列表流程、选择服务器流程、登录服务器流程、创建角色流程等流程，而对于单机游戏，你可能需要在游戏选择菜单流程和游戏实际玩法流程之间做切换。如果想增加流程，只要派生自 ProcedureBase 类并实现自己的流程类即可使用</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>通过流程模块会把游戏过程中不同的状态管理起来，每个流程都继承了FSM状态基类，原理虽然很简单，但是可以很好的解耦每一个流程，划分所有的状态，在花桑大佬的文章中还提到我们可以构建一棵流程树，通过不同环境执行不同流程</li>
</ul>
<h2 id="流程基类-ProcedureBase"><a href="#流程基类-ProcedureBase" class="headerlink" title="流程基类 ProcedureBase"></a>流程基类 ProcedureBase</h2><ul>
<li>ProcedureBase类作为流程的基类，属于一个抽象类，继承自FsmState,限定了持有者只能是IProcedureManager类型，通过父类约束子类不允许持有者存在IProcedureMananger以外类型</li>
</ul>
<h2 id="流程管理器-ProcedureManager"><a href="#流程管理器-ProcedureManager" class="headerlink" title="流程管理器 ProcedureManager"></a>流程管理器 ProcedureManager</h2><ul>
<li>m_FsmManager 通过Initialize初始化状态管理器属性,调用时传入有限状态机管理器以及流程列表</li>
<li>m_ProcedureFsm 在初始化时通过IFsm提供的CreateFsm传入持有者以及流程类创建一个新的流程</li>
<li><B>管理器还提供了StartProcedure来启动流程,启动指定的流程</B></li>
</ul>
<h2 id="流程组件-ProcedureComponent"><a href="#流程组件-ProcedureComponent" class="headerlink" title="流程组件 ProcedureComponent"></a>流程组件 ProcedureComponent</h2><ul>
<li>Start中通过反射创建流程列表里流程的实例</li>
<li>通过Manager提供的Initialize初始化流程列表并通过管理器管理起来</li>
<li>并延迟一帧执行当前指定的流程</li>
</ul>
<h2 id="编辑器可视化配置-ProcedureComponentInsepctor"><a href="#编辑器可视化配置-ProcedureComponentInsepctor" class="headerlink" title="编辑器可视化配置 ProcedureComponentInsepctor"></a>编辑器可视化配置 ProcedureComponentInsepctor</h2><ul>
<li>代码修改后编辑器会重新编译代码</li>
<li>脚本通过加载程序集遍历程序集里的类且收集ProcedureBase</li>
<li>显示在挂载了ProcedureComponent组件的编辑器面板里</li>
</ul>
<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Unity DLL 编译流程 </summary>
              <div class='content'>
              <p>在 Unity 中，脚本会根据它们的放置位置和用途编译成不同的程序集（Assembly）。Unity 的编译过程是自动管理的，并且会根据项目的配置和脚本的路径来决定脚本编译到哪些程序集里。下面详细介绍 Unity 的程序集编译过程。</p><p class='h4' id="1-编译分组"><a href="#1-编译分组" class="headerlink" title="1. 编译分组"></a>1. 编译分组</h4><p>Unity 会将脚本根据放置的位置分为不同的编译分组，主要包括：</p><h4 id="Runtime-Assemblies"><a href="#Runtime-Assemblies" class="headerlink" title="Runtime Assemblies"></a>Runtime Assemblies</h4><ul><li><strong><code>Assembly-CSharp.dll</code></strong>: 包含 <code>Assets</code> 目录下的大部分运行时脚本。</li><li><strong><code>Assembly-CSharp-firstpass.dll</code></strong>: 包含 <code>Assets/Plugins</code> 下的运行时脚本，优先编译。这些脚本通常是第三方库或插件的一部分。</li><li><strong><code>Assembly-CSharp-Editor.dll</code></strong>: 包含 <code>Assets/Editor</code> 下的编辑器脚本，只有在 Unity 编辑器中使用。</li></ul><h4 id="Editor-Assemblies"><a href="#Editor-Assemblies" class="headerlink" title="Editor Assemblies"></a>Editor Assemblies</h4><ul><li><strong><code>Assembly-CSharp-Editor-firstpass.dll</code></strong>: 包含 <code>Assets/Plugins/Editor</code> 下的脚本。用于在编辑器中运行的插件代码。</li></ul><p>这些程序集的划分允许 Unity 对不同用途的脚本进行独立的编译，这样可以优化编译时间，并确保编辑器代码不会在运行时构建中包含。</p><h4 id="2-编译流程"><a href="#2-编译流程" class="headerlink" title="2. 编译流程"></a>2. 编译流程</h4><p>Unity 的编译流程如下：</p><h4 id="脚本的扫描"><a href="#脚本的扫描" class="headerlink" title="脚本的扫描"></a>脚本的扫描</h4><ul><li>Unity 会扫描 <code>Assets</code> 目录及其子目录，识别脚本文件（如 <code>.cs</code>、<code>.js</code>、<code>.boo</code>，尽管 Boo 和 UnityScript 已被弃用）。这些脚本会被分类到不同的编译分组中。</li></ul><h4 id="按顺序编译"><a href="#按顺序编译" class="headerlink" title="按顺序编译"></a>按顺序编译</h4><ul><li>编译是按顺序进行的，优先编译 <code>Plugins</code> 文件夹中的内容。这意味着 <code>Plugins</code> 中的程序集会先编译，供其他脚本使用。</li><li>接着编译 <code>Standard Assets</code> 文件夹中的脚本，确保这些标准资源可以被 <code>Assets</code> 目录中的脚本引用。</li><li>最后编译 <code>Assets</code> 目录中的其他脚本和 <code>Editor</code> 脚本。</li></ul><h4 id="程序集生成"><a href="#程序集生成" class="headerlink" title="程序集生成"></a>程序集生成</h4><ul><li>每个编译分组中的脚本会被编译成一个单独的 <code>.dll</code> 文件。例如，<code>Assets</code> 中的运行时脚本会被编译为 <code>Assembly-CSharp.dll</code>。</li><li>这些程序集会被 Unity 用于运行时或编辑器内使用。</li></ul><h4 id="编译缓存"><a href="#编译缓存" class="headerlink" title="编译缓存"></a>编译缓存</h4><ul><li>Unity 使用增量编译，当你修改某个脚本时，Unity 只会重新编译受影响的脚本或程序集，而不是重新编译整个项目。这样可以显著减少编译时间。</li></ul><h4 id="3-自定义程序集（Assembly-Definitions）"><a href="#3-自定义程序集（Assembly-Definitions）" class="headerlink" title="3. 自定义程序集（Assembly Definitions）"></a>3. 自定义程序集（Assembly Definitions）</h4><p>在 Unity 2017.3 之后，Unity 引入了 <strong>Assembly Definition Files</strong>（<code>.asmdef</code>），允许开发者更精确地控制脚本的编译方式和程序集的生成。使用 <code>.asmdef</code> 文件，你可以：</p><ul><li>创建自定义程序集，定义某些脚本应编译成哪个程序集。</li><li>指定程序集之间的依赖关系。</li><li>限制脚本的编译平台。</li><li>控制程序集的命名和版本信息。</li></ul><p>通过 <code>.asmdef</code> 文件，开发者可以更好地组织代码结构，提高编译速度，并减少不必要的依赖关系。</p><h4 id="4-编译目标"><a href="#4-编译目标" class="headerlink" title="4. 编译目标"></a>4. 编译目标</h4><p>Unity 的编译过程不仅生成适用于编辑器的程序集，还会根据你选择的构建目标（如 Android、iOS、Windows、WebGL 等）生成适合目标平台的二进制文件。对于某些平台，如 IL2CPP，Unity 会将 C# 代码编译为 C++，然后再生成目标平台的可执行文件。</p><p class='h3' id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Unity 的程序集编译过程是自动化和分组化的，根据脚本的位置和用途，Unity 会生成不同的程序集，这些程序集对应于项目中的不同功能模块。对于更高级的编译控制，你可以使用 <strong>Assembly Definition Files</strong> 来创建自定义程序集并管理它们之间的依赖关系。</p>
              </div>
            </details>

]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-YooAsset+Hybridclr</title>
    <url>/2024/09/05/UnityYooAsset-Hybridclr/</url>
    <content><![CDATA[<h2 id="本篇主要记录在项目中如何使用YooAsset-Hybridclr-带上痛苦面具的三天"><a href="#本篇主要记录在项目中如何使用YooAsset-Hybridclr-带上痛苦面具的三天" class="headerlink" title="本篇主要记录在项目中如何使用YooAsset+Hybridclr (带上痛苦面具的三天)"></a>本篇主要记录在项目中如何使用YooAsset+Hybridclr (带上痛苦面具的三天)</h2><p><strong>启动流程:</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/GF-UGF-StartProcedure.drawio.png"
                      alt="GameProcedure"
                ></p>
<p><strong>YooAsset使用方式</strong></p>
<a class="button  center large" href='../../../../2024/08/30/UnityYooAsset-instances/' title='YooAsset-实践'><i class='fa fa-solid fa-arrow-right fa-beat-fade'></i> YooAsset-实践</a>

<p><strong>HybridCLR使用方式</strong></p>
<a class="button  center large" href='../../../../2024/09/05/Unity-Hybridclr-instance/' title='HybridCLR-实践'><i class='fa fa-solid fa-arrow-right fa-beat-fade'></i> HybridCLR-实践</a>

<h2 id="如何结合YooAsset-HybridCLR-实践"><a href="#如何结合YooAsset-HybridCLR-实践" class="headerlink" title="如何结合YooAsset+HybridCLR-实践"></a>如何结合YooAsset+HybridCLR-实践</h2><ul>
<li>HybridCLR文档中提过，我们需要把项目代码拆分成AOT程序集以及HotFix程序集，如果觉得是个非常痛苦的过程，主要是对程序集这个概念理解不透彻</li>
</ul>
<details class="red" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>程序集 </summary>
              <div class='content'>
              <ul><li>在 Unity 中，程序集（Assembly） 是用来组织和编译脚本代码的基本单元。通过合理管理程序集，可以提高项目的编译效率、模块化程度以及代码的可维护性。</li></ul><p class='h3' id="Unity-中程序集的基本概念"><a href="#Unity-中程序集的基本概念" class="headerlink" title="Unity 中程序集的基本概念"></a>Unity 中程序集的基本概念</h3><ul><li>程序集（Assembly）：在 .NET&#x2F;Mono 环境下，程序集是编译后的代码库，通常以 .dll 文件的形式存在。Unity 使用程序集来管理和隔离不同的脚本代码。</li><li>默认程序集：Unity 为项目中的脚本自动生成一些默认程序集，例如：</li><li>Assembly-CSharp.dll：包含 Assets 目录下 Scripts 文件夹中的所有脚本（默认）。</li><li>Assembly-CSharp-Editor.dll：包含 Editor 文件夹下的所有编辑器脚本。</li><li>其他根据项目结构自动生成的程序集。</li></ul><p><strong>使用 Assembly Definition Files（.asmdef）管理程序集：</strong></p><ul><li>为了更好地控制和优化程序集，Unity 提供了 Assembly Definition Files（简称 .asmdef 文件）。通过创建和配置 .asmdef 文件，可以自定义程序集的划分。</li></ul><p><strong>创建 .asmdef 文件：</strong></p><ul><li>在 Unity 编辑器的 Project 窗口中，右键点击需要创建程序集的文件夹。</li><li>选择 Create &gt; Assembly Definition，为新程序集命名，例如 MyCustomAssembly。</li></ul><p><strong>配置 .asmdef 文件：</strong></p><ul><li>选中刚创建的 .asmdef 文件，在 Inspector 窗口中进行配置。</li><li>Name：程序集的名称。</li><li>References：添加该程序集所依赖的其他程序集。</li><li>Platforms：指定程序集适用的平台。</li><li>Optional References：可选的程序集引用。</li><li>Define Constraints：定义条件编译符号。</li></ul><p><strong>管理程序集的最佳实践：</strong></p><ul><li>模块化：将项目划分为多个独立的模块，每个模块对应一个程序集。这有助于提高代码的可维护性和复用性。</li><li>减少依赖：尽量减少程序集之间的相互依赖，避免产生循环引用。使用接口或事件机制来解耦模块。</li><li>分离编辑器代码和运行时代码：将编辑器相关的脚本放在独立的编辑器程序集（通常在 Editor 文件夹中）中，避免在构建时包含不必要的代码。</li><li>命名规范：为程序集命名时，采用有意义且易于识别的名称，便于团队协作和代码管理。</li><li>优化编译时间：通过合理划分程序集，减少每次代码更改时需要重新编译的范围，从而提升整体编译速度。</li></ul>
              </div>
            </details>

<h4 id="拆分程序集"><a href="#拆分程序集" class="headerlink" title="拆分程序集"></a>拆分程序集</h4><ul>
<li><p>拆分<br>Assets&#x2F;<br>└── _GameMain&#x2F;<br>  ├──_Const&#x2F;<br>  │   ├── Const.asmdef<br>  │   └── Constants.cs<br>  ├──_Boot&#x2F;<br>  │   ├── Boot.asmdef<br>  │   └── BootManager.cs<br>  ├──_ConfigBaseScript&#x2F;<br>  │   ├── ConfigBaseScript.asmdef<br>  │   └── BaseConfig.cs<br>  ├──_Manager&#x2F;<br>  │   ├── Manager.asmdef<br>  │   └── GameManager.cs<br>  ├──_Scripts&#x2F;<br>  │   ├── Scripts.asmdef<br>  │   └── HotfixLogic.cs<br>  └──_Util&#x2F;<br>  ├── Util.asmdef<br>  └── Utility.cs</p>
</li>
<li><p>当程序集内脚本引用了别的程序集的脚本，需要设置对应引用</p>
</li>
<li><p>点击Assembly Definition Asset中Assembly Definition Reference-&gt;添加程序集</p>
</li>
</ul>
<p><strong>例如：</strong></p>
<ul>
<li>A.Assembly[AClass,DClass,EClass]</li>
<li>B.Assembly[BClass,CClass]</li>
<li>A.Assembly ref B.Assembly -&gt; AClass ref BClass A程序集引用了B程序集后，AClass才能调用BClass</li>
<li>注意循环引用，如果需要相互引用，需要抽象一层，接口或者类都行</li>
</ul>
<h4 id="打包程序集"><a href="#打包程序集" class="headerlink" title="打包程序集"></a>打包程序集</h4><ul>
<li>Project Setting-&gt;GtvrudCLR Settings-&gt;<code>Hot UpdateAssembly Deinitions</code>-&gt;添加你需要热更的程序集</li>
<li>Project Setting-&gt;GtvrudCLR Settings-&gt;<code>Patch AOT Assemblies</code>-&gt;补充元数据</li>
</ul>
<a class="button  center large" href='<https://hybridclr.doc.code-philosophy.com/docs/beginner/generic' title='<font size=2>元数据补充相关文档</font>'><i class='fa> fa-solid fa-arrow-right fa-beat-fade'></i> <font size=2>元数据补充相关文档</font></a>

<ul>
<li>工具栏-&gt;HybridCLR-&gt;CompileDll</li>
<li>DLL会生成在<code>ProjectName/HybridCLRData/HotUpdateDlls</code>下</li>
<li>找到我们的需要热更的DLL 复制到 Asset&#x2F;DllCollect,添加后缀Bytes,方便后续通过Yooasset使用TextAsset加载</li>
<li>可以通过editor脚本生成并复制（参考示例项目）</li>
</ul>
<a class="button  center large" href='<https://github.com/focus-creative-games/hybridclr_trial' title='<font size=2>示例项目</font>'><i class='fa> fa-solid fa-arrow-right fa-beat-fade'></i> <font size=2>示例项目</font></a>

<h4 id="Yooasset打包资源"><a href="#Yooasset打包资源" class="headerlink" title="Yooasset打包资源"></a>Yooasset打包资源</h4><ul>
<li>工具栏-&gt;YooAsset-&gt;AssetBundle Collector-&gt;设置需要收集的资源-&gt;save</li>
<li>工具栏-&gt;YooAsset-&gt;AssetBundle Builder-&gt;Build</li>
<li>Project&#x2F;Bundle&#x2F;[版本文件夹]&#x2F;[资源]</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>收集Dll需要FileIgnoreRule需要选择RawFileIgnoreRule</li>
<li>打开定位寻址需要保证所有的资源名称不重复，因为内部会通过字典收集这些地址，会导致Key重复，构建出错<a class="button  center large" href='../../../../2024/08/28/UnityYooAsset/' title='<font size=2>了解如何收集与构建资源</font>'><i class='fa fa-solid fa-arrow-right fa-beat-fade'></i> <font size=2>了解如何收集与构建资源</font></a></li>
</ul>
<h4 id="搭建一个本地文件服务器"><a href="#搭建一个本地文件服务器" class="headerlink" title="搭建一个本地文件服务器"></a>搭建一个本地文件服务器</h4><ul>
<li>我这里直接用的软件<a class="button  center large" href='<https://www.rejetto.com/hfs/' title='<font size=2>一键搭建软件</font>'><i class='fa> fa-solid fa-arrow-right fa-beat-fade'></i> <font size=2>一键搭建软件</font></a></li>
<li>将YooAsset打包的资源放到本地文件服务器里</li>
<li>创建配置脚本</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>CdnConfig</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityGameFramework.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CdnConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> AndroidPath = <span class="string">&quot;CDN/Android/DefaultPackage/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> IOSPath = <span class="string">&quot;CDN/iOS/DefaultPackage/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> WindowsPath = <span class="string">&quot;CDN/StandaloneWindows64/DefaultPackage/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CdnServicesUrl = <span class="string">&quot;http://192.168.57.105:8080/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> FailedServicesUrl = <span class="string">&quot;http://192.168.57.105:8080/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> ResourceVersion = <span class="string">&quot;v0.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取对应平台资源链接</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>对应平台CDN资源服务链接<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetUrlByPlatfrom</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FindUrlByPlatfrom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取对应平台资源链接</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;runtimePlatform&quot;&gt;</span>想要获取的平台<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetUrlByPlatfrom</span>(<span class="params">RuntimePlatform runtimePlatform</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FindUrlByPlatfrom(runtimePlatform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FindUrlByPlatfrom</span>(<span class="params">RuntimePlatform runtimePlatform = <span class="literal">default</span>, <span class="built_in">string</span> resourceVersion = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (runtimePlatform == <span class="literal">default</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            runtimePlatform = Application.platform;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resourceVersion == <span class="literal">null</span>) resourceVersion = ResourceVersion;</span><br><span class="line">        <span class="keyword">switch</span> (runtimePlatform)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> RuntimePlatform.Android:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;CdnServicesUrl&#125;</span><span class="subst">&#123;AndroidPath&#125;</span><span class="subst">&#123;resourceVersion&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> RuntimePlatform.IPhonePlayer:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;CdnServicesUrl&#125;</span><span class="subst">&#123;IOSPath&#125;</span><span class="subst">&#123;resourceVersion&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> RuntimePlatform.WindowsPlayer:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;CdnServicesUrl&#125;</span><span class="subst">&#123;WindowsPath&#125;</span><span class="subst">&#123;resourceVersion&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> RuntimePlatform.WindowsEditor:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;CdnServicesUrl&#125;</span><span class="subst">&#123;WindowsPath&#125;</span><span class="subst">&#123;resourceVersion&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                Log.Error(<span class="string">$&quot;检测到不兼容平台<span class="subst">&#123;runtimePlatform&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">default</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>联机模式下加载</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>StrategtSelect.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//策略选择器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityGameFramework.Runtime;</span><br><span class="line"><span class="keyword">using</span> YooAsset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StrategtSelect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;EPlayMode, Func&lt;IYooAssetInitializationStrategy&gt;&gt; modeMap =</span><br><span class="line">        <span class="keyword">new</span> Dictionary&lt;EPlayMode, Func&lt;IYooAssetInitializationStrategy&gt;&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; EPlayMode.EditorSimulateMode, () =&gt; <span class="keyword">new</span> EditorSimulateModeStrategy() &#125;,</span><br><span class="line">        &#123; EPlayMode.OfflinePlayMode, () =&gt; <span class="keyword">new</span> OfflinePlayModeStrategy() &#125;,</span><br><span class="line">        &#123; EPlayMode.HostPlayMode, () =&gt; <span class="keyword">new</span> HostPlayModeStrategy() &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IYooAssetInitializationStrategy <span class="title">GetStrategyByPlayMode</span>(<span class="params">EPlayMode mode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (modeMap.TryGetValue(mode, <span class="keyword">out</span> <span class="keyword">var</span> strategy))</span><br><span class="line">            <span class="keyword">return</span> strategy();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Log.Error(<span class="string">$&quot;No strategy found for play mode: <span class="subst">&#123;mode&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若找不到返回默认策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HostPlayModeStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>IYooAssetInitializationStrategy.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//策略初始化接口</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityGameFramework.Runtime;</span><br><span class="line"><span class="keyword">using</span> YooAsset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IYooAssetInitializationStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">Initialize</span>(<span class="params">ResourcePackage package</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>AInitializeYooAsset.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//策略基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseStrategy</span> : <span class="title">IYooAssetInitializationStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IEnumerator <span class="title">Initialize</span>(<span class="params">ResourcePackage package</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">InitializePackageAsync</span>(<span class="params">ResourcePackage package, InitializeParameters initParameters</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Info(<span class="string">&quot;初始化包&quot;</span>);</span><br><span class="line">        <span class="comment">// 异步执行初始化操作</span></span><br><span class="line">        <span class="keyword">var</span> initOperation = package.InitializeAsync(initParameters);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> initOperation;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据初始化结果记录日志</span></span><br><span class="line">        <span class="keyword">if</span> (initOperation.Status == EOperationStatus.Succeed)</span><br><span class="line">            Log.Info(<span class="string">&quot;资源包初始化成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Log.Error(<span class="string">$&quot;资源包初始化失败：<span class="subst">&#123;initOperation.Error&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//策略实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HostPlayModeStrategy</span> : <span class="title">BaseStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IEnumerator <span class="title">Initialize</span>(<span class="params">ResourcePackage package</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 远程资源模式初始化逻辑</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 联机运行模式初始化逻辑</span></span><br><span class="line">        IRemoteServices remoteServices = <span class="keyword">new</span> RemoteServices(CdnConfig.GetUrlByPlatfrom(), CdnConfig.GetUrlByPlatfrom());</span><br><span class="line">        <span class="keyword">var</span> cacheFileSystem = FileSystemParameters.CreateDefaultCacheFileSystemParameters(remoteServices,<span class="keyword">new</span> FileDecryption());</span><br><span class="line">        <span class="keyword">var</span> initParameters = <span class="keyword">new</span> HostPlayModeParameters();</span><br><span class="line">        initParameters.CacheFileSystemParameters = cacheFileSystem;</span><br><span class="line">        <span class="keyword">var</span> initOperation = InitializePackageAsync(package, initParameters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> initOperation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>YooAssetsMgr.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Cysharp.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> YooAsset;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Cysharp.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Framework;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> UnityGameFramework.Runtime;</span><br><span class="line"><span class="keyword">using</span> YooAsset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAssetDownloader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">UniTask <span class="title">Download</span>()</span>;</span><br><span class="line">    <span class="function">ResourceDownloaderOperation <span class="title">GetDownloader</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDownloadErrorFunction</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">string</span> error</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDownloadProgressUpdateFunction</span>(<span class="params"><span class="built_in">int</span> totalDownloadCount, <span class="built_in">int</span> currentDownloadCount, <span class="built_in">long</span> totalDownloadBytes, <span class="built_in">long</span> currentDownloadBytes</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDownloadOverFunction</span>(<span class="params"><span class="built_in">bool</span> isSucceed</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnStartDownloadFileFunction</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">long</span> sizeBytes</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">YooAssetsMgr</span> : <span class="title">IAssetDownloader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IYooAssetInitializationStrategy initializationStrategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">StartLoadAsset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> initializationStrategy.Initialize(curResourcePackage);<span class="comment">//初始化当前模式资源包</span></span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">RequestPackageVersion</span>()</span>;<span class="comment">//请求包版本</span></span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">UpdatePackageManifest</span>()</span>;<span class="comment">//请求包清单</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>初始化包信息完成后</li>
<li>通过curResourcePackage.CreateResourceDownloader(int downloadingMaxNumber, int failedTryAgain, int timeout &#x3D; 60)获取下载器</li>
<li>下载器提供TotalDownloadCount属性判断是否有新的内容需要下载</li>
<li>下载完成后我们的资源也全都到位了</li>
<li>通过LoadAssetSync同步加载我们的热更模块以及入口对象</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>ProcedureLoadAssetDown.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> textAsset = YooAssets.LoadAssetSync(<span class="string">&quot;Hotfix.dll&quot;</span>).AssetObject <span class="keyword">as</span> TextAsset;</span><br><span class="line">Assembly.Load(textAsset.bytes);</span><br><span class="line"><span class="keyword">var</span> initObject = YooAssets.LoadAssetSync&lt;GameObject&gt;(<span class="string">&quot;Assets/Art/ScriptPrefab/BootHotfixEntrace.prefab&quot;</span>);</span><br><span class="line">GameObject.Instantiate(initObject.AssetObject);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在Awake 调用补充元数据函数</li>
<li>Start中加载首页需要展示的内容</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>BootHotfixEntrace.cs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> HybridCLR;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> YooAsset;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BootHotfixEntrace</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LoadMetadataForAOTAssemblies</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; aotMetaAssemblyFiles = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;mscorlib.dll&quot;</span>,</span><br><span class="line">            <span class="string">&quot;System.dll&quot;</span>,</span><br><span class="line">            <span class="string">&quot;System.Core.dll&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UniTask.dll&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注意，补充元数据是给AOT dll补充元数据，而不是给热更新dll补充元数据。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 热更新dll不缺元数据，不需要补充，如果调用LoadMetadataForAOTAssembly会返回错误</span></span><br><span class="line">        HomologousImageMode mode = HomologousImageMode.SuperSet;</span><br><span class="line">        <span class="keyword">var</span> package = GameMgr.Inst.yooAssetsMgr.curResourcePackage;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> aotDllName <span class="keyword">in</span> aotMetaAssemblyFiles)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> handle = package.LoadAssetSync&lt;TextAsset&gt;(aotDllName);</span><br><span class="line">            <span class="keyword">var</span> dllBytes = handle.AssetObject <span class="keyword">as</span> TextAsset;</span><br><span class="line">            <span class="comment">// 加载assembly对应的dll，会自动为它hook。一旦aot泛型函数的native函数不存在，用解释器版本代码</span></span><br><span class="line">            LoadImageErrorCode err = RuntimeApi.LoadMetadataForAOTAssembly(dllBytes.bytes, mode);</span><br><span class="line">            Debug.Log(<span class="string">$&quot;LoadMetadataForAOTAssembly:<span class="subst">&#123;aotDllName&#125;</span>. mode:<span class="subst">&#123;mode&#125;</span> ret:<span class="subst">&#123;err&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        LoadMetadataForAOTAssemblies();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> LoginPanel = YooAssets.LoadAssetSync&lt;GameObject&gt;(<span class="string">&quot;xxx.prefab&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> MainPanel = YooAssets.LoadAssetSync&lt;GameObject&gt;(<span class="string">&quot;xxxx.prefab&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ActorPar = YooAssets.LoadAssetSync&lt;GameObject&gt;(<span class="string">&quot;xxxxx.prefab&quot;</span>);</span><br><span class="line">        Framework.EventListener.Instance.<span class="keyword">on</span>(EventConst.LOGIN_END, () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;资源释放&quot;</span>);</span><br><span class="line">            LoginPanel.Release();</span><br><span class="line">        &#125;);</span><br><span class="line">        Instantiate(MainPanel.AssetObject);</span><br><span class="line">        <span class="keyword">var</span> obj = Instantiate(LoginPanel.AssetObject <span class="keyword">as</span> GameObject, GameObject.Find(<span class="string">&quot;Canvas&quot;</span>).transform);</span><br><span class="line">        obj.SetActive(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> enter_obj = obj.transform.Find(<span class="string">&quot;enter_btn&quot;</span>);</span><br><span class="line">        enter_obj.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">        Instantiate(ActorPar.AssetObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="热更DLL"><a href="#热更DLL" class="headerlink" title="热更DLL"></a>热更DLL</h4><ul>
<li>修改热更代码-&gt;重新build资源包-&gt;替换服务器资源-&gt;YooAsset会检查对应的package.json内的版本号查看差异并刷新清单下载新的内容</li>
<li>资源同上，具体看不同HybridCLR与YooAsset的实践文章</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>使用过程中其实出现了很多问题，需要常看两个框架的文档，里面有常见问题的解决方案。</li>
<li>例如AOT模块不能依赖热更模块</li>
<li>加载资源会生成句柄，不使用需要及时回收，否则后造成内存泄漏</li>
</ul>
]]></content>
      <categories>
        <category>YooAsset,Hybridclr</category>
      </categories>
      <tags>
        <tag>资源管理,热更</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-YooAsset-实践</title>
    <url>/2024/08/30/UnityYooAsset-instances/</url>
    <content><![CDATA[<h2 id="YooAsset-初始化"><a href="#YooAsset-初始化" class="headerlink" title="YooAsset 初始化"></a>YooAsset 初始化</h2><ul>
<li>加载资源的模式有四种，逐个逐个来</li>
</ul>
<p><strong>新建 MonoBehaviour 脚本:</strong></p>
<p><strong>加载模式 EPlayMode:</strong></p>
<div class="tabs" id="tab-eplaymode"><ul class="nav-tabs"><li class="tab active"><a class="#eplaymode-1">EditorSimulateMode</a></li><li class="tab"><a class="#eplaymode-2">OfflinePlayMode</a></li><li class="tab"><a class="#eplaymode-3">HostPlayMode</a></li><li class="tab"><a class="#eplaymode-4">WebPlayMode</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eplaymode-1"><ul>
<li>EditorSimulateMode 编辑器模拟模式</li>
<li>在编辑器下，不需要构建资源包，来模拟运行游戏。</li>
<li>注意：该模式只在编辑器下起效</li>
</ul></div><div class="tab-pane" id="eplaymode-2"><ul>
<li>OfflinePlayMode 单机运行模式</li>
<li>对于不需要热更新资源的游戏，可以使用单机运行模式。</li>
<li>注意：该模式需要构建资源包</li>
</ul></div><div class="tab-pane" id="eplaymode-3"><ul>
<li>HostPlayMode 联机运行模式</li>
<li>对于需要热更新资源的游戏，可以使用联机运行模式。</li>
<li>注意：该模式需要构建资源包</li>
</ul></div><div class="tab-pane" id="eplaymode-4"><ul>
<li>WebPlayMode Web运行模式</li>
<li>针对WebGL平台的专属模式，包括微信小游戏，抖音小游戏都需要选择该模式。</li>
<li>注意：该模式需要构建资源包</li>
</ul></div></div></div>

<h3 id="编辑器模拟模式"><a href="#编辑器模拟模式" class="headerlink" title="编辑器模拟模式"></a>编辑器模拟模式</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>编辑器模拟模式加载资源</span></figcaption><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 初始化资源系统</span></span><br><span class="line">       YooAssets.Initialize();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 初始化默认资源包</span></span><br><span class="line">       <span class="keyword">var</span> package = InitializePackage();</span><br><span class="line"></span><br><span class="line">       StartCoroutine(InitializeEditorSimulateMode(package));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化默认资源包并设置为默认包</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> ResourcePackage <span class="title">InitializePackage</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 创建一个名为 &quot;DefaultPackage&quot; 的资源包</span></span><br><span class="line">       <span class="keyword">var</span> package = YooAssets.CreatePackage(<span class="string">&quot;DefaultPackage&quot;</span>);</span><br><span class="line">       <span class="comment">// 设置该资源包为默认包</span></span><br><span class="line">       YooAssets.SetDefaultPackage(package);</span><br><span class="line">       <span class="keyword">return</span> package;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在编辑器模拟模式下初始化资源包</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">EditorInitializeYooAsset</span>(<span class="params">ResourcePackage package</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 使用内置构建管线模拟构建</span></span><br><span class="line">       <span class="keyword">var</span> buildPipeline = EDefaultBuildPipeline.BuiltinBuildPipeline;</span><br><span class="line">       <span class="keyword">var</span> simulateBuildResult = EditorSimulateModeHelper.SimulateBuild(buildPipeline, <span class="string">&quot;DefaultPackage&quot;</span>);</span><br><span class="line">       <span class="comment">// 创建编辑器文件系统参数</span></span><br><span class="line">       <span class="keyword">var</span> editorFileSystem = FileSystemParameters.CreateDefaultEditorFileSystemParameters(simulateBuildResult);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 设置编辑器模拟模式的初始化参数</span></span><br><span class="line">       <span class="keyword">var</span> initParameters = <span class="keyword">new</span> EditorSimulateModeParameters</span><br><span class="line">       &#123;</span><br><span class="line">           EditorFileSystemParameters = editorFileSystem</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 初始化资源包</span></span><br><span class="line">       <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">InitializePackageAsync</span>(<span class="params">package, initParameters</span>)</span>;</span><br><span class="line">       <span class="comment">// 请求并加载资源</span></span><br><span class="line">       <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">RequestAndLoadAssets</span>(<span class="params">package</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步初始化资源包</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">InitializePackageAsync</span>(<span class="params">ResourcePackage package, EditorSimulateModeParameters initParameters</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 异步执行初始化操作</span></span><br><span class="line">       <span class="keyword">var</span> initOperation = package.InitializeAsync(initParameters);</span><br><span class="line">       <span class="keyword">yield</span> <span class="keyword">return</span> initOperation;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 根据初始化结果记录日志</span></span><br><span class="line">       <span class="keyword">if</span> (initOperation.Status == EOperationStatus.Succeed)</span><br><span class="line">           Debug.Log(<span class="string">&quot;资源包初始化成功！&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           Debug.LogError(<span class="string">$&quot;资源包初始化失败：<span class="subst">&#123;initOperation.Error&#125;</span>&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求资源包版本并加载资源</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">RequestAndLoadAssets</span>(<span class="params">ResourcePackage package</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 异步请求资源包版本</span></span><br><span class="line">       <span class="keyword">var</span> operation = package.RequestPackageVersionAsync();</span><br><span class="line">       <span class="keyword">yield</span> <span class="keyword">return</span> operation;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 检查请求结果并记录日志</span></span><br><span class="line">       <span class="keyword">if</span> (operation.Status != EOperationStatus.Succeed)</span><br><span class="line">       &#123;</span><br><span class="line">           Debug.LogWarning(operation.Error);</span><br><span class="line">           PatchEventDefine.PackageVersionUpdateFailed.SendEventMessage();</span><br><span class="line">           <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Debug.Log(<span class="string">$&quot;Request package version : <span class="subst">&#123;operation.PackageVersion&#125;</span>&quot;</span>);</span><br><span class="line">       <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSecondsRealtime</span>(<span class="params"><span class="number">0.5f</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 更新资源包清单</span></span><br><span class="line">       <span class="keyword">var</span> packageVersion = operation.PackageVersion;</span><br><span class="line">       <span class="keyword">var</span> manifestUpdate = package.UpdatePackageManifestAsync(packageVersion);</span><br><span class="line">       <span class="keyword">yield</span> <span class="keyword">return</span> manifestUpdate;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 检查更新结果并记录日志</span></span><br><span class="line">       <span class="keyword">if</span> (manifestUpdate.Status != EOperationStatus.Succeed)</span><br><span class="line">       &#123;</span><br><span class="line">           Debug.LogWarning(manifestUpdate.Error);</span><br><span class="line">           PatchEventDefine.PatchManifestUpdateFailed.SendEventMessage();</span><br><span class="line">           <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 异步加载指定资源</span></span><br><span class="line">       <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">LoadAssetAsync</span>(<span class="params">package, <span class="string">&quot;List View&quot;</span></span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步加载指定资源</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">LoadAssetAsync</span>(<span class="params">ResourcePackage package, <span class="built_in">string</span> assetName</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 异步加载资源</span></span><br><span class="line">       <span class="keyword">var</span> handle = package.LoadAssetAsync&lt;GameObject&gt;(assetName);</span><br><span class="line">       handle.Completed += Handle_Completed;</span><br><span class="line">       <span class="keyword">yield</span> <span class="keyword">return</span> handle;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 资源加载完成时的回调函数</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Handle_Completed</span>(<span class="params">AssetHandle handle</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (handle.Status == EOperationStatus.Succeed)</span><br><span class="line">       &#123;</span><br><span class="line">           Debug.Log(<span class="string">&quot;资源加载成功！&quot;</span>);</span><br><span class="line">           <span class="comment">// 实例化加载的资源并将其添加到 Canvas 下</span></span><br><span class="line">           handle.InstantiateAsync(GameObject.Find(<span class="string">&quot;Canvas&quot;</span>).transform);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           Debug.LogError(<span class="string">$&quot;资源加载失败：<span class="subst">&#123;handle.LastError&#125;</span>&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>流程：</strong></p>
<ul>
<li><p>初始化资源系统</p>
</li>
<li><p>创建默认资源包</p>
</li>
<li><p>通过YooAssets.SetDefaultPackage(package)设置默认资源包</p>
</li>
<li><p>使用内置构建管线模拟构建（通过内置管线构建会在编辑器运行时在Asset&#x2F;Bundle下创建资源，打开可以看到资源的路径）</p>
</li>
<li><p>初始化资源包：InitializePackageAsync(ResourcePackage package, EditorSimulateModeParameters initParameters)</p>
</li>
<li><p>请求包版本 package.RequestPackageVersionAsync()</p>
</li>
<li><p>更新包清单 package.UpdatePackageManifestAsync(packageVersion)</p>
</li>
<li><p>加载你想加载的资源</p>
</li>
</ul>
<h3 id="单机运行模式"><a href="#单机运行模式" class="headerlink" title="单机运行模式"></a>单机运行模式</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>单机运行模式加载资源</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">OfflineInitializeYooAsset</span>(<span class="params">ResourcePackage package</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> buildinFileSystem = FileSystemParameters.CreateDefaultBuildinFileSystemParameters();</span><br><span class="line">    <span class="keyword">var</span> initParameters = <span class="keyword">new</span> OfflinePlayModeParameters();</span><br><span class="line">    initParameters.BuildinFileSystemParameters = buildinFileSystem;</span><br><span class="line">    <span class="keyword">var</span> initOperation = package.InitializeAsync(initParameters);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> initOperation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initOperation.Status == EOperationStatus.Succeed)</span><br><span class="line">        Debug.Log(<span class="string">&quot;资源包初始化成功！&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Debug.LogError(<span class="string">$&quot;资源包初始化失败：<span class="subst">&#123;initOperation.Error&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求并加载资源</span></span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">RequestAndLoadAssets</span>(<span class="params">package</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>单机运行模式提供了继承InitializeParameters的OfflinePlayModeParameters类用于初始化资源包</li>
<li>与编辑器模式一样，初始化资源包后，都需要请求包版本和更新包清单</li>
</ul>
<h3 id="联机运行模式"><a href="#联机运行模式" class="headerlink" title="联机运行模式"></a>联机运行模式</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>联机运行模式初始化逻辑</span></figcaption><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 联机运行模式初始化资源包</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">HostInitializeYooAsset</span>(<span class="params">ResourcePackage package</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> defaultHostServer = <span class="string">&quot;文件服务器地址/StandaloneWindows64/DefaultPackage/2024-09-02-925&quot;</span>;<span class="comment">//默认文件服务器</span></span><br><span class="line">    <span class="built_in">string</span> fallbackHostServer = <span class="string">&quot;文件服务器地址/StandaloneWindows64/DefaultPackage/2024-09-02-925&quot;</span>;<span class="comment">//备用文件服务器</span></span><br><span class="line">    IRemoteServices remoteServices = <span class="keyword">new</span> RemoteServicesV2(defaultHostServer, fallbackHostServer);</span><br><span class="line">    <span class="keyword">var</span> cacheFileSystem = FileSystemParameters.CreateDefaultCacheFileSystemParameters(remoteServices);</span><br><span class="line">    <span class="keyword">var</span> initParameters = <span class="keyword">new</span> HostPlayModeParameters();</span><br><span class="line">    initParameters.CacheFileSystemParameters = cacheFileSystem;</span><br><span class="line">    <span class="keyword">var</span> initOperation = InitializePackageAsync(package,initParameters);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> initOperation;</span><br><span class="line">    <span class="comment">// 初始化资源包</span></span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">RequestAndLoadAssets</span>(<span class="params">package</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>流程：</strong></p>
<ul>
<li><p>RemoteServices需要实现IRemoteServices接口</p>
</li>
<li><p>创建默认的缓存文件系统参数</p>
</li>
<li><p>创建默认的内置文件系统参数</p>
</li>
<li><p>初始化联机运行模式的参数</p>
</li>
<li><p>初始化资源包</p>
</li>
<li><p>与编辑器模式一样，初始化资源包后，都需要请求包版本和更新包清单</p>
</li>
</ul>
<p><strong>加密：</strong></p>
<ul>
<li>在Editor目录下实现一个继承IEncryptionServices接口的类。</li>
</ul>
<p><strong>解密支持三种方式：</strong></p>
<div class="tabs" id="tab-eplaymode"><ul class="nav-tabs"><li class="tab active"><a class="#eplaymode-1">LoadFromFileOffset</a></li><li class="tab"><a class="#eplaymode-2">LoadFromMemory</a></li><li class="tab"><a class="#eplaymode-3">LoadFromStream</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eplaymode-1"><ul>
<li>LoadFromFileOffset 通过文件偏移来解密加载</li>
</ul></div><div class="tab-pane" id="eplaymode-2"><ul>
<li>LoadFromMemory 通过文件内存来解密加载</li>
</ul></div><div class="tab-pane" id="eplaymode-3"><ul>
<li>LoadFromStream 通过文件流来解密加载</li>
</ul></div></div></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>文件偏移加密方式</span></figcaption><table><tr><td class="code"><pre><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件偏移加密方式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileOffsetEncryption</span> : <span class="title">IEncryptionServices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptResult <span class="title">Encrypt</span>(<span class="params">EncryptFileInfo fileInfo</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注意：只对音频资源包加密</span></span><br><span class="line">        <span class="keyword">if</span> (fileInfo.BundleName.Contains(<span class="string">&quot;_gameres_audio&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> offset = <span class="number">32</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] fileData = File.ReadAllBytes(fileInfo.FilePath);</span><br><span class="line">            <span class="keyword">var</span> encryptedData = <span class="keyword">new</span> <span class="built_in">byte</span>[fileData.Length + offset];</span><br><span class="line">            Buffer.BlockCopy(fileData, <span class="number">0</span>, encryptedData, offset, fileData.Length);</span><br><span class="line"></span><br><span class="line">            EncryptResult result = <span class="keyword">new</span> EncryptResult();</span><br><span class="line">            result.Encrypted = <span class="literal">true</span>;</span><br><span class="line">            result.EncryptedData = encryptedData;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            EncryptResult result = <span class="keyword">new</span> EncryptResult();</span><br><span class="line">            result.Encrypted = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>解密方法：</strong></p>
<ul>
<li>实现一个继承IDecryptionServices接口的运行时的类。</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><figcaption><span>资源文件偏移加载解密类</span></figcaption><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">FileOffsetDecryption</span> : <span class="title">IDecryptionServices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// AssetBundle解密方法</span></span><br><span class="line">    AssetBundle IDecryptionServices.LoadAssetBundle(DecryptFileInfo fileInfo, <span class="keyword">out</span> Stream managedStream)</span><br><span class="line">    &#123;</span><br><span class="line">        managedStream = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> AssetBundle.LoadFromFile(fileInfo.FileLoadPath, fileInfo.ConentCRC, GetFileOffset());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AssetBundle解密方法</span></span><br><span class="line">    AssetBundleCreateRequest IDecryptionServices.LoadAssetBundleAsync(DecryptFileInfo fileInfo, <span class="keyword">out</span> Stream managedStream)</span><br><span class="line">    &#123;</span><br><span class="line">        managedStream = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> AssetBundle.LoadFromFileAsync(fileInfo.FileLoadPath, fileInfo.ConentCRC, GetFileOffset());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原生文件解密方法</span></span><br><span class="line">    <span class="built_in">byte</span>[] IDecryptionServices.ReadFileData(DecryptFileInfo fileInfo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原生文件解密方法</span></span><br><span class="line">    <span class="built_in">string</span> IDecryptionServices.ReadFileText(DecryptFileInfo fileInfo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">ulong</span> <span class="title">GetFileOffset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>加密解密类使用:</strong></p>
<ul>
<li>加密 : 打包时选择</li>
<li>解密 : 以联机模式作为示例-&gt;FileSystemParameters.CreateDefaultCacheFileSystemParameters(remoteServices,new 加密类())</li>
<li></li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>加载完默认资源包后必须获取包版本并且更新包Mainfest属性，因为我们加载的资源包并没有包含部分属性以及参数，所以在通过API加载资源时会调用DebugCheckInitialize检查一些资源包信息，可能会导致加载失败</p>
</li>
<li><p>资源包：资源的整合包</p>
</li>
<li><p>资源：整合包里的资源</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>作为刚接触YooAsset的人还是需要导入源码，然后看示例项目，单看文档上的脚本并不能很直观的理解，例如在编辑器中如何模拟构建的，实际上内置管线通过反射调用了编辑器调用的YooAsset.Editor.AssetBundleSimulateBuilder.SimulateBuild()</li>
</ul>
<a class="button  center large" href='https://github.com/tuyoogame/YooAsset/releases' title='YooAsset源码地址'><i class='fa fa-thumbs-up'></i> YooAsset源码地址</a>]]></content>
      <categories>
        <category>YooAsset</category>
      </categories>
      <tags>
        <tag>资源管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-YooAsset</title>
    <url>/2024/08/28/UnityYooAsset/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>YooAsset是一套用于Unity3D的资源管理系统，用于帮助研发团队快速部署和交付游戏。</p>
<p>它可以满足商业化游戏的各类需求，并且经历多款百万DAU游戏产品的验证。</p>
<a class="button  center large" href='<https://www.yooasset.com/docs/guide-editor/QuickStart>' title='YooAsset官方文档'><i class='fa fa-thumbs-up'></i> YooAsset官方文档</a>

<h2 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h2><ul>
<li>通过右键-&gt;Create-&gt;YooAsset-&gt;Create Setting创建</li>
<li>需要放置在Resources目录下</li>
<li>配置说明:<br><strong>Manifest File Name : 清单文件名称</strong><br><strong>Default Yoo Folder Name : 沙盒目录和内置目录的文件夹名称</strong></li>
</ul>
<h2 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h2><ul>
<li>工具栏-&gt;YooAsset-&gt;AssetBundle Collector (资源配置界面)</li>
</ul>
<h3 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h3><ul>
<li><p>左侧为分组列表，右侧为该分组的配置界面。</p>
</li>
<li><p>import：可以导入保存的XML文件。</p>
</li>
<li><p>export：可以将配置数据导出为XML文件。</p>
</li>
<li><p>fix：在配置里的文件夹挪动位置之后，可以通过该按钮来修正。</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityYooAsset/image.png"
                      alt="资源配置界面"
                ></p>
<h3 id="全局配置-GlobalSetting"><a href="#全局配置-GlobalSetting" class="headerlink" title="全局配置(GlobalSetting)"></a>全局配置(GlobalSetting)</h3><p><strong>Show Package</strong></p>
<ul>
<li>是否展示资源包列表视图</li>
</ul>
<p><strong>Show Editor Alias</strong></p>
<ul>
<li>是否显示为中文模式</li>
</ul>
<p><strong>Unique Bundle Name</strong></p>
<ul>
<li>资源包名追加PackageName作为前缀</li>
</ul>
<h3 id="包裹设置-PackageSetting"><a href="#包裹设置-PackageSetting" class="headerlink" title="包裹设置(PackageSetting)"></a>包裹设置(PackageSetting)</h3><p><strong>Enable Addressable</strong></p>
<ul>
<li><p>启用可寻址资源定位系统。</p>
</li>
<li><p>开启可寻址的同时也支持全路径加载！</p>
</li>
</ul>
<p><strong>Location To Lower</strong></p>
<ul>
<li>资源定位地址大小写不敏感。</li>
</ul>
<p><strong>Include Asset GUID</strong></p>
<ul>
<li>资源清单里包含资源GUID信息。</li>
</ul>
<p><strong>Auto Collect Shaders</strong></p>
<ul>
<li>将所有着色器构建到独立的资源包内。</li>
</ul>
<p><strong>File Ignore Rule</strong></p>
<ul>
<li><p>文件全局忽略规则。该规则可以扩展！</p>
</li>
<li><p>原生文件配置选择RawFileIgnoreRule</p>
</li>
</ul>
<h3 id="资源分组"><a href="#资源分组" class="headerlink" title="资源分组"></a>资源分组</h3><p><strong>Group Active</strong></p>
<ul>
<li>激活规则，规则可以自定义扩展。下面是内置规则：<br>  <strong>EnableGroup 启用分组</strong><br>  <strong>DisableGroup 禁用分组</strong></li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义扩展范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DisableGroup</span> : <span class="title">IActiveRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsActiveGroup</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Group Name</strong></p>
<ul>
<li>分组名称</li>
</ul>
<p><strong>Group Description</strong></p>
<ul>
<li>分组备注信息</li>
</ul>
<p><strong>Asset Tags</strong></p>
<ul>
<li><p>资源分类标签列表，该分组下收集的资源会全部被打上该标签。</p>
</li>
<li><p>注意：多个标签用分号隔开，例如 level1;level2;level3</p>
</li>
</ul>
<h3 id="Collector-搜集器"><a href="#Collector-搜集器" class="headerlink" title="Collector(搜集器)"></a>Collector(搜集器)</h3><ul>
<li><p>Path 收集路径，可以指定文件夹或单个资源文件。</p>
</li>
<li><p>Collector Type 收集器类型：</p>
</li>
</ul>
<div class="tabs" id="tab-assetcollector"><ul class="nav-tabs"><li class="tab active"><a class="#assetcollector-1">MainAssetCollector</a></li><li class="tab"><a class="#assetcollector-2">StaticAssetCollector</a></li><li class="tab"><a class="#assetcollector-3">DependAssetCollector</a></li></ul><div class="tab-content"><div class="tab-pane active" id="assetcollector-1"><ul>
<li>MainAssetCollector 收集参与打包的主资源对象，并写入到资源清单的资源列表里（可以通过代码加载）。</li>
</ul></div><div class="tab-pane" id="assetcollector-2"><ul>
<li>StaticAssetCollector 收集参与打包的主资源对象，但不写入到资源清单的资源列表里（无法通过代码加载）。</li>
</ul></div><div class="tab-pane" id="assetcollector-3"><ul>
<li>DependAssetCollector 收集参与打包的依赖资源对象，但不写入到资源清单的资源列表里（无法通过代码加载）（当依赖资源没有被任何主资源引用的时候，则会在打包的时候自动剔除）。</li>
</ul></div></div></div>

<ul>
<li>StaticAssetCollector 收集器和DependAssetCollector收集器适合对资源进行定制化打包策略。</li>
</ul>
<details class="green" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>示例 </summary>
              <div class='content'>
              <ul><li>示例1：</li></ul><p>一个游戏的粒子特效的纹理会非常多，通常特效制作师会把这些纹理放到一个文件夹内管理。如果我们把这些纹理打进一个AssetBundle文件内，当下次更新的时候，如果新增或改动了一个纹理，那么就要上传整个纹理的AssetBundle文件。<br>我们可以把特效纹理通过DependAssetCollector收集器进行收集并自定义打包规则，通过文件名称的首字母进行小粒度打包，这样一个AssetBundle文件会被拆分为26个AssetBundle文件。</p><ul><li>示例2：</li></ul><p>当我们需要严格控制某个文件夹内的依赖资源打进同一个AssetBundle文件内，那么StaticAssetCollector收集器是最佳选择，该收集器收集的资源，无论是否被其它资源引用或被多个资源引用，这些资源都会按照设定的打包规则打包，且这些资源不会被处理为share资源包。</p>
              </div>
            </details>

<p><strong>AddressRule 寻址规则:</strong></p>
<ul>
<li>可寻址规则，规则可以自定义扩展。下面是内置规则：</li>
</ul>
<div class="tabs" id="tab-addressrule"><ul class="nav-tabs"><li class="tab active"><a class="#addressrule-1">MainAssetCollector</a></li><li class="tab"><a class="#addressrule-2">AddressByFilePath</a></li><li class="tab"><a class="#addressrule-3">AddressByGrouperAndFileName</a></li><li class="tab"><a class="#addressrule-4">AddressByFolderAndFileName</a></li></ul><div class="tab-content"><div class="tab-pane active" id="addressrule-1"><ul>
<li>AddressByFileName 以文件名为定位地址。</li>
</ul></div><div class="tab-pane" id="addressrule-2"><ul>
<li>AddressByFilePath 以文件路径为定位地址。</li>
</ul></div><div class="tab-pane" id="addressrule-3"><ul>
<li>AddressByGrouperAndFileName 以分组名+文件名为定位地址。</li>
</ul></div><div class="tab-pane" id="addressrule-4"><ul>
<li>AddressByFolderAndFileName 以文件夹名+文件名为定位地址。</li>
</ul></div></div></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义扩展范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddressByFileName</span> : <span class="title">IAddressRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> IAddressRule.GetAssetAddress(AddressRuleData data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Path.GetFileNameWithoutExtension(data.AssetPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="PackRule-打包规则"><a href="#PackRule-打包规则" class="headerlink" title="PackRule 打包规则"></a>PackRule 打包规则</h3><p><strong>打包规则，规则可以自定义扩展。下面是内置规则:</strong></p>
<div class="tabs" id="tab-packrule"><ul class="nav-tabs"><li class="tab active"><a class="#packrule-1">PackSeparately</a></li><li class="tab"><a class="#packrule-2">PackDirectory</a></li><li class="tab"><a class="#packrule-3">PackTopDirectory</a></li><li class="tab"><a class="#packrule-4">PackCollector</a></li><li class="tab"><a class="#packrule-5">PackGroup</a></li><li class="tab"><a class="#packrule-6">PackRawFile</a></li></ul><div class="tab-content"><div class="tab-pane active" id="packrule-1"><ul>
<li>PackSeparately 以文件路径作为资源包名，每个资源文件单独打包。</li>
</ul></div><div class="tab-pane" id="packrule-2"><ul>
<li>PackDirectory 以文件所在的文件夹路径作为资源包名，该文件夹下所有文件打进一个资源包。</li>
</ul></div><div class="tab-pane" id="packrule-3"><ul>
<li>PackTopDirectory 以收集器下顶级文件夹为资源包名，该文件夹下所有文件打进一个资源包。</li>
</ul></div><div class="tab-pane" id="packrule-4"><ul>
<li>PackCollector 以收集器路径作为资源包名，收集的所有文件打进一个资源包。</li>
</ul></div><div class="tab-pane" id="packrule-5"><ul>
<li>PackGroup 以分组名称作为资源包名，收集的所有文件打进一个资源包。</li>
</ul></div><div class="tab-pane" id="packrule-6"><ul>
<li>PackRawFile 目录下的资源文件会被处理为原生资源包。**</li>
</ul></div></div></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义扩展范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PackDirectory</span> : <span class="title">IPackRule</span></span><br><span class="line">&#123;</span><br><span class="line">    PackRuleResult IPackRule.GetPackRuleResult(PackRuleData data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//&quot;Assets/Config/test.txt&quot; --&gt; &quot;Assets/Config&quot;</span></span><br><span class="line">        <span class="built_in">string</span> bundleName = Path.GetDirectoryName(data.AssetPath);</span><br><span class="line">        PackRuleResult result = <span class="keyword">new</span> PackRuleResult(bundleName, DefaultPackRule.AssetBundleFileExtension);</span><br><span class="line">        <span class="keyword">return</span> result;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> IPackRule.IsRawFilePackRule()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="FilterRule"><a href="#FilterRule" class="headerlink" title="FilterRule"></a>FilterRule</h3><p><strong>过滤规则，规则可以自定义扩展。下面是内置规则:</strong></p>
<div class="tabs" id="tab-packrule"><ul class="nav-tabs"><li class="tab active"><a class="#packrule-1">PackRawFile</a></li><li class="tab"><a class="#packrule-2">PackRawFile</a></li><li class="tab"><a class="#packrule-3">PackRawFile</a></li><li class="tab"><a class="#packrule-4">PackRawFile</a></li></ul><div class="tab-content"><div class="tab-pane active" id="packrule-1"><ul>
<li>CollectAll 收集目录下的所有资源文件</li>
</ul></div><div class="tab-pane" id="packrule-2"><ul>
<li>CollectScene 只收集目录下的场景文件</li>
</ul></div><div class="tab-pane" id="packrule-3"><ul>
<li>CollectPrefab 只收集目录下的预制体文件</li>
</ul></div><div class="tab-pane" id="packrule-4"><ul>
<li>CollectSprite 只收集目录下的精灵类型的文件</li>
</ul></div></div></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义扩展范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CollectScene</span> : <span class="title">IFilterRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsCollectAsset</span>(<span class="params">FilterRuleData data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Path.GetExtension(data.AssetPath) == <span class="string">&quot;.unity&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="UserData"><a href="#UserData" class="headerlink" title="UserData"></a>UserData</h3><ul>
<li>用户自定义数据，可以帮助定制化AddressRule和PackRule</li>
</ul>
<h3 id="AssetTags"><a href="#AssetTags" class="headerlink" title="AssetTags"></a>AssetTags</h3><ul>
<li>资源分类标签列表，该收集器下收集的资源会全部被打上该标签</li>
</ul>
<h3 id="原生文件配置"><a href="#原生文件配置" class="headerlink" title="原生文件配置"></a>原生文件配置</h3><ul>
<li><p>原生文件配置和AssetBundle配置需要分开，各自创建自己的Package</p>
</li>
<li><p>在原生文件的包裹设置界面里将File Ignore Rule下拉选择RawFileIgnoreRule，这样构建管线才会识别Unity引擎无法识别的原生文件</p>
</li>
<li><p>资源包构建阶段选择RawFileBuildPipeline构建管线</p>
</li>
</ul>
<h2 id="资源构建"><a href="#资源构建" class="headerlink" title="资源构建"></a>资源构建</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityYooAsset/imag2e.png"
                      alt="资源构建"
                ></p>
<h3 id="Build-Package"><a href="#Build-Package" class="headerlink" title="Build Package"></a>Build Package</h3><ul>
<li>资源包裹的列表，下拉选择要构建的资源包裹</li>
</ul>
<h3 id="Build-Pipeline"><a href="#Build-Pipeline" class="headerlink" title="Build Pipeline"></a>Build Pipeline</h3><p><strong>构建管线的列表，下拉选择要使用的构建管线：</strong></p>
<div class="tabs" id="tab-build-mode"><ul class="nav-tabs"><li class="tab active"><a class="#build-mode-1">BuiltinBuildPipeline</a></li><li class="tab"><a class="#build-mode-2">ScriptableBuildPipeline</a></li><li class="tab"><a class="#build-mode-3">PackRawFile</a></li></ul><div class="tab-content"><div class="tab-pane active" id="build-mode-1"><ul>
<li>传统的内置构建管线</li>
</ul></div><div class="tab-pane" id="build-mode-2"><ul>
<li>Unity 后续推出的可编程构建管线，和可编程渲染管线一样，让开发者有能力控制打包流程</li>
</ul></div><div class="tab-pane" id="build-mode-3"><ul>
<li>RawFileBuildPipeline 原生文件构建管线，用与构建Unity引擎无法识别的资源类型，例如FMOD的音频文件（bank后缀格式）</li>
</ul></div></div></div>

<ul>
<li><strong>注意： 从Unity2021.3版本开始，推荐使用ScriptableBuildPipeline构建管线</strong></li>
</ul>
<h3 id="Build-Output"><a href="#Build-Output" class="headerlink" title="Build Output"></a>Build Output</h3><ul>
<li>构建输出的目录，会根据Unity编辑器当前切换的平台自动划分构建结果</li>
</ul>
<h3 id="Build-Version"><a href="#Build-Version" class="headerlink" title="Build Version"></a>Build Version</h3><ul>
<li>构建的资源包版本</li>
</ul>
<h3 id="Build-Mode"><a href="#Build-Mode" class="headerlink" title="Build Mode"></a>Build Mode</h3><ul>
<li>构建模式</li>
</ul>
<div class="tabs" id="tab-build-mode"><ul class="nav-tabs"><li class="tab active"><a class="#build-mode-1">ForceRebuild</a></li><li class="tab"><a class="#build-mode-2">IncrementalBuild</a></li><li class="tab"><a class="#build-mode-3">DryRunBuild</a></li><li class="tab"><a class="#build-mode-4">SimulateBuild</a></li></ul><div class="tab-content"><div class="tab-pane active" id="build-mode-1"><ul>
<li>强制构建模式  会删除指定构建平台下的所有构建记录，重新构建所有资源包。</li>
</ul></div><div class="tab-pane" id="build-mode-2"><ul>
<li>增量构建模式  以上一次构建结果为基础，对于发生变化的资源进行增量构建。</li>
</ul></div><div class="tab-pane" id="build-mode-3"><ul>
<li>演练构建模式  在不生成AssetBundle文件的前提下，进行演练构建并快速生成构建报告和补丁清单。</li>
</ul></div><div class="tab-pane" id="build-mode-4"><ul>
<li>模拟构建模式  在编辑器下配合EditorSimulateMode运行模式，来模拟真实运行的环境。</li>
</ul></div></div></div>

<h3 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h3><ul>
<li>加密类列表</li>
</ul>
<h3 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h3><ul>
<li>资源包的压缩方式</li>
</ul>
<h3 id="File-Name-Style"><a href="#File-Name-Style" class="headerlink" title="File Name Style"></a>File Name Style</h3><ul>
<li>输出的资源包文件名称样式</li>
</ul>
<div class="tabs" id="tab-packrule"><ul class="nav-tabs"><li class="tab active"><a class="#packrule-1">HashName</a></li><li class="tab"><a class="#packrule-2">BundleName</a></li><li class="tab"><a class="#packrule-3">BundleName_HashName</a></li></ul><div class="tab-content"><div class="tab-pane active" id="packrule-1"><ul>
<li>HashName : 哈希值</li>
</ul></div><div class="tab-pane" id="packrule-2"><ul>
<li>BundleName : 资源包名</li>
</ul></div><div class="tab-pane" id="packrule-3"><ul>
<li>BundleName_HashName : 资源包名+哈希值</li>
</ul></div></div></div>

<h3 id="Copy-Buildin-File-Option"><a href="#Copy-Buildin-File-Option" class="headerlink" title="Copy Buildin File Option"></a>Copy Buildin File Option</h3><ul>
<li>首包资源文件的拷贝方式</li>
</ul>
<div class="tabs" id="tab-copy-buildin-file-option"><ul class="nav-tabs"><li class="tab active"><a class="#copy-buildin-file-option-1">None</a></li><li class="tab"><a class="#copy-buildin-file-option-2">ClearAndCopyAll</a></li><li class="tab"><a class="#copy-buildin-file-option-3">ClearAndCopyByTags</a></li><li class="tab"><a class="#copy-buildin-file-option-4">OnlyCopyAll</a></li><li class="tab"><a class="#copy-buildin-file-option-5">OnlyCopyByTags</a></li></ul><div class="tab-content"><div class="tab-pane active" id="copy-buildin-file-option-1"><ul>
<li>None：不拷贝任何文件</li>
</ul></div><div class="tab-pane" id="copy-buildin-file-option-2"><ul>
<li>ClearAndCopyAll：先清空已有文件，然后拷贝所有文件</li>
</ul></div><div class="tab-pane" id="copy-buildin-file-option-3"><ul>
<li>ClearAndCopyByTags：先清空已有文件，然后按照资源标签拷贝文件</li>
</ul></div><div class="tab-pane" id="copy-buildin-file-option-4"><ul>
<li>OnlyCopyAll：不清空已有文件，直接拷贝所有文件</li>
</ul></div><div class="tab-pane" id="copy-buildin-file-option-5"><ul>
<li>OnlyCopyByTags：不清空已有文件，直接按照资源标签拷贝文件</li>
</ul></div></div></div>

<h3 id="Click-Build-构建"><a href="#Click-Build-构建" class="headerlink" title="Click Build 构建"></a>Click Build 构建</h3><ul>
<li>点击构建按钮会开始构建流程，构建流程分为多个节点顺序执行，如果某个节点发生错误，会导致构建失败。错误信息可以在控制台查看。</li>
</ul>
<h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3><ul>
<li>在Editor目录实现一个继承IEncryptionServices接口类</li>
<li>加密支持三种方式：</li>
</ul>
<div class="tabs" id="tab-packrule"><ul class="nav-tabs"><li class="tab active"><a class="#packrule-1">LoadFromFileOffset</a></li><li class="tab"><a class="#packrule-2">LoadFromMemory</a></li><li class="tab"><a class="#packrule-3">LoadFromStream</a></li></ul><div class="tab-content"><div class="tab-pane active" id="packrule-1"><ul>
<li>LoadFromFileOffset 通过文件偏移来解密加载</li>
</ul></div><div class="tab-pane" id="packrule-2"><ul>
<li>LoadFromMemory 通过文件内存来解密加载</li>
</ul></div><div class="tab-pane" id="packrule-3"><ul>
<li>LoadFromStream 通过文件流来解密加载</li>
</ul></div></div></div>

<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件偏移加密方式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileOffsetEncryption</span> : <span class="title">IEncryptionServices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptResult <span class="title">Encrypt</span>(<span class="params">EncryptFileInfo fileInfo</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注意：只对音频资源包加密</span></span><br><span class="line">        <span class="keyword">if</span> (fileInfo.BundleName.Contains(<span class="string">&quot;_gameres_audio&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> offset = <span class="number">32</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] fileData = File.ReadAllBytes(fileInfo.FilePath);</span><br><span class="line">            <span class="keyword">var</span> encryptedData = <span class="keyword">new</span> <span class="built_in">byte</span>[fileData.Length + offset];</span><br><span class="line">            Buffer.BlockCopy(fileData, <span class="number">0</span>, encryptedData, offset, fileData.Length);</span><br><span class="line"></span><br><span class="line">            EncryptResult result = <span class="keyword">new</span> EncryptResult();</span><br><span class="line">            result.Encrypted = <span class="literal">true</span>;</span><br><span class="line">            result.EncryptedData = encryptedData;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            EncryptResult result = <span class="keyword">new</span> EncryptResult();</span><br><span class="line">            result.Encrypted = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="补丁包"><a href="#补丁包" class="headerlink" title="补丁包"></a>补丁包</h3><ul>
<li><p>构建成功后会在输出目录下找到补丁包文件夹，该文件夹名称为本次构建时指定的资源版本号</p>
</li>
<li><p>补丁包文件夹里包含补丁清单文件，资源包文件，构建报告文件等</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityYooAsset/image3e.png"
                      alt="补丁包"
                ></p>
<h3 id="补丁清单"><a href="#补丁清单" class="headerlink" title="补丁清单"></a>补丁清单</h3><ul>
<li>补丁清单文件是上图中以PackageManifest开头命名的文件</li>
</ul>
<div class="tabs" id="tab-packrule"><ul class="nav-tabs"><li class="tab active"><a class="#packrule-1">xxx.hash</a></li><li class="tab"><a class="#packrule-2">xxx.json</a></li><li class="tab"><a class="#packrule-3">xxx.bytes</a></li></ul><div class="tab-content"><div class="tab-pane active" id="packrule-1"><ul>
<li>PackageManifest_DefaultPackage_xxx.hash 记录了补丁清单文件的哈希值</li>
</ul></div><div class="tab-pane" id="packrule-2"><ul>
<li>PackageManifest_DefaultPackage_xxx.json 该文件为Json文本格式，主要用于开发者预览信息</li>
</ul></div><div class="tab-pane" id="packrule-3"><ul>
<li>PackageManifest_DefaultPackage_xxx.bytes 该文件为二进制格式，主要用于程序内读取加载</li>
</ul></div></div></div>

<h3 id="构建报告"><a href="#构建报告" class="headerlink" title="构建报告"></a>构建报告</h3><ul>
<li><p>BuildReport_DefaultPackage_xxx.json文件为构建报告文件。可以通过构建报告窗口查看本次构建的详细信息</p>
</li>
<li><p>工具栏 -&gt; YooAsset -&gt; Asset Reporter 打开窗口并导入报告</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/UnityYooAsset/image4e.png"
                      alt="构建报告"
                ></p>
<h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><div class="tabs" id="tab-packrule"><ul class="nav-tabs"><li class="tab active"><a class="#packrule-1">增量构建</a></li><li class="tab"><a class="#packrule-2">强制构建</a></li><li class="tab"><a class="#packrule-3">首包资源</a></li><li class="tab"><a class="#packrule-4">补丁包</a></li></ul><div class="tab-content"><div class="tab-pane active" id="packrule-1"><ul>
<li>增量构建是在Unity的帮助下实现的一种快速打包机制。主要是利用资源构建相关的缓存文件来避免二次构建，以此来提高打包效率。</li>
</ul></div><div class="tab-pane" id="packrule-2"><ul>
<li>强制构建是每次构建之前，都会清空之前构建的所有缓存文件，以此来重新构建资源包。</li>
</ul></div><div class="tab-pane" id="packrule-3"><ul>
<li>在构建应用程序的时候，我们希望将某些资源打进首包里，首包资源拷贝至StreamingAssets&#x2F;yoo&#x2F;目录下。首包资源如果发生变化，也可以通过热更新来更新资源。</li>
</ul></div><div class="tab-pane" id="packrule-4"><ul>
<li>无论是通过增量构建还是强制构建，在构建完成后都会生成一个以包裹版本（PackageVersion）命名的文件夹，我们把这个文件夹统称为补丁包。补丁包里包含了游戏运行需要的所有资源，我们可以无脑的将补丁包内容覆盖到CDN目录下，也可以通过编写差异分析工具，来筛选出和线上最新版本之间的差异文件，然后将差异文件上传到CDN目录里。</li>
</ul></div></div></div>

<a class="button  center large" href='https://www.yooasset.com/docs/api/' title='API Documentation'><i class='fa fa-thumbs-up'></i> API Documentation</a>
]]></content>
      <categories>
        <category>YooAsset</category>
      </categories>
      <tags>
        <tag>资源管理</tag>
      </tags>
  </entry>
  <entry>
    <title>A*算法记录</title>
    <url>/2024/11/06/AStarPathFinding/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>A*寻路旨在计算平面图形中起点到终点的最短距离。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li>核心算法-评估函数:f(n)&#x3D;g(n)+h(n)</li>
<li>g(n)&#x3D;实际代价[实际代价:通常为已走过的路径长度]</li>
<li>h(n)&#x3D;预估代价[预估代价:即当前走到的节点到终点的所需要的预估路径长度,也叫启发性函数,通常根据问题的特定性质来设计,用于引导算法走向终点]</li>
<li>算法总是选f(n)值最小的节点进行扩展</li>
</ul>
<p><strong>节点扩展:</strong></p>
<ul>
<li>设置一个起点,将起点加入开放列表[开放列表存放需要探索的节点]</li>
<li>从开放列表中选择f(n)值最小的节点作为当前节点的扩展节点</li>
<li>对于当前节点的每个相邻节点,如果该节点不在开放列表中,则添加进开放列表,如果已经存在则新的与旧的比较f(n)值,新的f(n)比旧的小,则更新该节点的f(n)值和父节点</li>
<li>将当前节点从开放列表中移除,并加入到封闭列表中,表示该节点已经被探索过</li>
<li>重复上述步骤,直到找到终点或者开放列表为空</li>
</ul>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul>
<li>创建开放列表和封闭列表。</li>
<li>将起点加入开放列表,设其 g (n) 为 0,用曼哈顿距离计算 h (n)。</li>
<li>检查邻居节点,计算其 g (n)&#x3D; 父节点 g (n)+1,执行启发式函数。</li>
<li>从开放列表移除当前检索节点。</li>
<li>将检索过的节点加入封闭列表。</li>
<li>重复上述步骤。</li>
<li>得到路径</li>
<li>回溯路径</li>
</ul>
<h3 id="代码记录"><a href="#代码记录" class="headerlink" title="代码记录"></a>代码记录</h3><details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>[C#] </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> TMPro;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 节点位置</span></span><br><span class="line">    <span class="keyword">public</span> Vector2Int position;</span><br><span class="line">    <span class="comment">// 是否可通行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isWalkable;</span><br><span class="line">    <span class="comment">// 父节点</span></span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">    <span class="comment">// 从起点到当前节点的实际代价</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> gCost;</span><br><span class="line">    <span class="comment">// 从当前节点到终点的预估代价</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hCost;</span><br><span class="line">    <span class="comment">// 通过属性获取 fCost,fCost = gCost + hCost</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fCost =&gt; gCost + hCost;</span><br><span class="line">    <span class="comment">// 对应的游戏对象</span></span><br><span class="line">    <span class="keyword">public</span> GameObject gameObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数,传入位置和可通行性创建节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params">Vector2Int pos, <span class="built_in">bool</span> walkable</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        position = pos;</span><br><span class="line">        isWalkable = walkable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径查找类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PathFinding</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 开放列表,存储待探索的节点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; openList = <span class="keyword">new</span> List&lt;Node&gt;();</span><br><span class="line">    <span class="comment">// 网格字典,通过字符串键存储节点</span></span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, Node&gt; grid = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Node&gt;();</span><br><span class="line">    <span class="comment">// 封闭列表,存储已探索过的节点</span></span><br><span class="line">    <span class="keyword">public</span> HashSet&lt;Node&gt; closedList = <span class="keyword">new</span> HashSet&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起点对应的 RectTransform</span></span><br><span class="line">    <span class="keyword">private</span> RectTransform startObj;</span><br><span class="line">    <span class="comment">// 终点对应的 RectTransform</span></span><br><span class="line">    <span class="keyword">private</span> RectTransform endObj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 曼哈顿距离计算方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetManhattanDistance</span>(<span class="params">Vector2Int posA, Vector2Int posB</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 返回两个点的曼哈顿距离,即水平和垂直距离之和</span></span><br><span class="line">        <span class="keyword">return</span> Mathf.Abs(posA.x - posB.x) + Mathf.Abs(posA.y - posB.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 欧几里得距离计算方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetEuclideanDistance</span>(<span class="params">Vector2Int a, Vector2Int b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 返回两个点的欧几里得距离,即两点间的直线距离</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)Mathf.Sqrt(Mathf.Pow(a.x - b.x, <span class="number">2</span>) + Mathf.Pow(a.y - b.y, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化网格</span></span><br><span class="line">        InitializeGrid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeGrid</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历所有子节点（假设是网格中的方块）</span></span><br><span class="line">        <span class="keyword">foreach</span> (RectTransform child <span class="keyword">in</span> transform)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> pos = <span class="keyword">new</span> Vector2Int((<span class="built_in">int</span>)child.anchoredPosition.x, (<span class="built_in">int</span>)child.anchoredPosition.y);</span><br><span class="line">            <span class="comment">// 根据颜色判断是否可通行</span></span><br><span class="line">            <span class="keyword">var</span> isWalkable = child.GetComponent&lt;Image&gt;().color!= Color.red;</span><br><span class="line">            <span class="comment">// 设置文本显示位置</span></span><br><span class="line">            child.GetComponentInChildren&lt;TextMeshProUGUI&gt;().text = <span class="string">$&quot;[<span class="subst">&#123;pos.x&#125;</span>,<span class="subst">&#123;pos.y&#125;</span>]&quot;</span>;</span><br><span class="line">            <span class="comment">// 将节点添加到网格字典中</span></span><br><span class="line">            grid.Add(<span class="string">$&quot;[<span class="subst">&#123;pos.x&#125;</span>,<span class="subst">&#123;pos.y&#125;</span>]&quot;</span>, <span class="keyword">new</span> Node(pos, isWalkable)</span><br><span class="line">            &#123;</span><br><span class="line">                gameObject = child.gameObject</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindPath</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根据起点和终点的 RectTransform 获取对应的节点</span></span><br><span class="line">        Node startNode = GetNodeFromRect(startObj);</span><br><span class="line">        Node endNode = GetNodeFromRect(endObj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果起点或终点未设置,输出提示并返回</span></span><br><span class="line">        <span class="keyword">if</span> (startNode == <span class="literal">null</span> || endNode == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;起点或终点未设置。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空开放列表和封闭列表</span></span><br><span class="line">        openList.Clear();</span><br><span class="line">        closedList.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置起点的 gCost 为 0,hCost 为起点到终点的曼哈顿距离</span></span><br><span class="line">        startNode.gCost = <span class="number">0</span>;</span><br><span class="line">        startNode.hCost = GetManhattanDistance(startNode.position, endNode.position);</span><br><span class="line">        <span class="comment">// 将起点添加到开放列表</span></span><br><span class="line">        openList.Add(startNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当开放列表不为空时进行路径搜索</span></span><br><span class="line">        <span class="keyword">while</span> (openList.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 选择开放列表中 fCost 最小的节点作为当前节点</span></span><br><span class="line">            Node currentNode = openList[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; openList.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (openList[i].fCost &lt; currentNode.fCost || (openList[i].fCost == currentNode.fCost &amp;&amp; openList[i].hCost &lt; currentNode.hCost))</span><br><span class="line">                &#123;</span><br><span class="line">                    currentNode = openList[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从开放列表中移除当前节点,并添加到封闭列表</span></span><br><span class="line">            openList.Remove(currentNode);</span><br><span class="line">            closedList.Add(currentNode);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前节点是终点,输出提示并回溯路径</span></span><br><span class="line">            <span class="keyword">if</span> (currentNode.position == endNode.position)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">                VisualizePath(currentNode);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取当前节点的邻居节点</span></span><br><span class="line">            GetNearNode(currentNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到路径,输出提示</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;未找到路径&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">GetNodeFromRect</span>(<span class="params">RectTransform rect</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果传入的 RectTransform 为 null,返回 null</span></span><br><span class="line">        <span class="keyword">if</span> (rect == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pos = <span class="keyword">new</span> Vector2Int((<span class="built_in">int</span>)rect.anchoredPosition.x, (<span class="built_in">int</span>)rect.anchoredPosition.y);</span><br><span class="line">        <span class="built_in">string</span> key = <span class="string">$&quot;[<span class="subst">&#123;pos.x&#125;</span>,<span class="subst">&#123;pos.y&#125;</span>]&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果网格字典中包含对应位置的节点,返回该节点</span></span><br><span class="line">        <span class="keyword">if</span> (grid.ContainsKey(key))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> grid[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Node&gt; <span class="title">GetNearNode</span>(<span class="params">Node curNode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector2Int[] offsets = <span class="keyword">new</span> Vector2Int[] &#123; Vector2Int.up, Vector2Int.right, Vector2Int.left, Vector2Int.down &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cellSize = transform.GetComponent&lt;GridLayoutGroup&gt;().cellSize;</span><br><span class="line">        <span class="keyword">var</span> w = (<span class="built_in">int</span>)cellSize.x;</span><br><span class="line">        <span class="keyword">var</span> h = (<span class="built_in">int</span>)cellSize.y;</span><br><span class="line"></span><br><span class="line">        List&lt;Node&gt; neighbors = <span class="keyword">new</span> List&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历四个方向的偏移量</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> offset <span class="keyword">in</span> offsets)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = curNode.position.x + offset.x * w;</span><br><span class="line">            <span class="built_in">int</span> y = curNode.position.y + offset.y * h;</span><br><span class="line">            <span class="built_in">string</span> key = <span class="string">$&quot;[<span class="subst">&#123;x&#125;</span>,<span class="subst">&#123;y&#125;</span>]&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (grid.ContainsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                Node neighbor = grid[key];</span><br><span class="line">                <span class="comment">// 如果邻居节点可通行且不在封闭列表中</span></span><br><span class="line">                <span class="keyword">if</span> (neighbor.isWalkable &amp;&amp;!closedList.Contains(neighbor))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> newCost = curNode.gCost + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 如果邻居节点不在开放列表中或者新的代价更小</span></span><br><span class="line">                    <span class="keyword">if</span> (!openList.Contains(neighbor) || newCost &lt; neighbor.gCost)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 更新邻居节点的代价和父节点</span></span><br><span class="line">                        neighbor.gCost = newCost;</span><br><span class="line">                        neighbor.hCost = GetManhattanDistance(<span class="keyword">new</span> Vector2Int(x, y), GetNodeFromRect(endObj).position);</span><br><span class="line">                        neighbor.parent = curNode;</span><br><span class="line">                        <span class="comment">// 如果邻居节点不在开放列表中,添加到开放列表</span></span><br><span class="line">                        <span class="keyword">if</span> (!openList.Contains(neighbor))</span><br><span class="line">                        &#123;</span><br><span class="line">                            openList.Add(neighbor);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将邻居节点添加到邻居列表中</span></span><br><span class="line">                    neighbors.Add(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> neighbors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">VisualizePath</span>(<span class="params">Node endNode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从终点回溯到起点,将路径上的节点颜色设置为绿色</span></span><br><span class="line">        Node current = endNode;</span><br><span class="line">        <span class="keyword">while</span> (current!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            current.gameObject.GetComponent&lt;Image&gt;().color = Color.green;</span><br><span class="line">            current = current.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建“Find Path”按钮,点击时调用 FindPath 方法</span></span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>), <span class="string">&quot;Find Path&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            FindPath();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加重置按钮</span></span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(<span class="keyword">new</span> Rect(<span class="number">120</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>), <span class="string">&quot;Reset&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ResetPathfinding();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResetPathfinding</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 重置起点和终点</span></span><br><span class="line">        startObj = <span class="literal">null</span>;</span><br><span class="line">        endObj = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 清空开放列表和封闭列表</span></span><br><span class="line">        openList.Clear();</span><br><span class="line">        closedList.Clear();</span><br><span class="line">        <span class="comment">// 遍历所有节点,重置节点的父节点、gCost 和 hCost,并设置颜色</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> node <span class="keyword">in</span> grid.Values)</span><br><span class="line">        &#123;</span><br><span class="line">            node.parent = <span class="literal">null</span>;</span><br><span class="line">            node.gCost = <span class="number">0</span>;</span><br><span class="line">            node.hCost = <span class="number">0</span>;</span><br><span class="line">            node.gameObject.GetComponent&lt;Image&gt;().color = node.isWalkable? Color.white : Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetNodeType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> rect = EventSystem.current.currentSelectedGameObject.GetComponent&lt;RectTransform&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果起点未设置,设置起点并将颜色设置为蓝色</span></span><br><span class="line">        <span class="keyword">if</span> (startObj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            startObj = rect;</span><br><span class="line">            GetNodeFromRect(startObj).gameObject.GetComponent&lt;Image&gt;().color = Color.blue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果起点已设置但终点未设置,设置终点并将颜色设置为黄色</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (endObj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            endObj = rect;</span><br><span class="line">            GetNodeFromRect(endObj).gameObject.GetComponent&lt;Image&gt;().color = Color.yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>

<h3 id="类和方法解释"><a href="#类和方法解释" class="headerlink" title="类和方法解释"></a>类和方法解释</h3><details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>[类和方法解释] </summary>
              <div class='content'>
              <p><strong>Node类:</strong></p><ul><li>position:存储节点在二维网格中的位置,使用Vector2Int类型表示。</li><li>isWalkable:表示节点是否可通行,例如地图中红色区域可能不可通行。</li><li>parent:在路径查找过程中,存储当前节点的父节点,用于回溯路径。</li><li>gCost:从起点到当前节点的实际代价。</li><li>hCost:从当前节点到终点的预估代价。</li><li>fCost:通过属性计算得出,等于gCost和hCost之和,用于在 A * 算法中选择下一个要探索的节点。</li><li>gameObject:对应的游戏对象,可能用于在界面上显示节点的状态。</li></ul><p><strong>PathFinding类:</strong></p><ul><li>openList:存储待探索的节点列表。</li><li>grid:存储所有节点的字典,通过字符串键(例如”[x,y]”的形式)来访问节点。</li><li>closedList:存储已经探索过的节点集合。</li><li>startObj和endObj:分别存储起点和终点的RectTransform,用于在界面上定位起点和终点。</li><li>Start方法:在游戏开始时调用,用于初始化网格。通过遍历所有子节点,创建节点对象并添加到grid字典中,同时设置节点的文本显示和可通行性。</li><li>GetManhattanDistance方法:计算两个点之间的曼哈顿距离,即水平和垂直距离之和。在路径查找中,用于计算从当前节点到终点的预估代价。</li><li>GetEuclideanDistance方法:计算两个点之间的欧几里得距离,即两点间的直线距离。目前在代码中可能没有被实际使用。</li><li>FindPath方法:路径查找的核心方法。</li><li>GetNodeFromRect方法:根据传入的RectTransform获取对应的节点。如果RectTransform为null或者在网格字典中找不到对应位置的节点,则返回null。</li><li>GetNearNode方法:获取当前节点的邻居节点。</li><li>VisualizePath方法:从终点回溯到起点,将路径上的节点颜色设置为绿色,用于在界面上显示找到的路径。</li><li>OnGUI方法:在界面上绘制按钮。包括 “Find Path” 按钮和 “Reset” 按钮,分别用于触发路径查找和重置路径查找的状态。</li><li>ResetPathfinding方法:重置起点、终点和路径查找的状态。</li><li>SetNodeType方法:根据用户在界面上的选择设置起点和终点。</li></ul>
              </div>
            </details>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/AStarPathFinding/%E5%8A%A8%E7%94%BB.gif"
                      alt="alt text"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/AStarPathFinding/image.png"
                      alt="alt text"
                ></p>
<h3 id="扩展（全地图可通行节点覆盖）"><a href="#扩展（全地图可通行节点覆盖）" class="headerlink" title="扩展（全地图可通行节点覆盖）"></a>扩展（全地图可通行节点覆盖）</h3><p><strong>如何实现:</strong></p>
<ul>
<li>理解了A*算法后，发现只要我不停止，也就是假如并没有发现终点，就会一直检查邻居并探索直到开放列表不再存在节点内容后结束</li>
<li>当然BFS&#x2F;DFS比A*效率都高，因为需求如果是覆盖全路径的话，额外的启发式函数会消耗更多的性能，但是这里可以覆盖，就试试我的想法是否正确<details class="[red]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>[可通行节点覆盖] </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindPath</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根据起点和终点的 RectTransform 获取对应的节点</span></span><br><span class="line">    Node startNode = GetNodeFromRect(startObj);</span><br><span class="line">    Node endNode = GetNodeFromRect(endObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果起点或终点未设置,输出提示并返回</span></span><br><span class="line">    <span class="keyword">if</span> (startNode == <span class="literal">null</span> || endNode == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;起点或终点未设置。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空开放列表和封闭列表</span></span><br><span class="line">    openList.Clear();</span><br><span class="line">    closedList.Clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置起点的 gCost 为 0,hCost 为起点到终点的曼哈顿距离</span></span><br><span class="line">    startNode.gCost = <span class="number">0</span>;</span><br><span class="line">    startNode.hCost = GetManhattanDistance(startNode.position, endNode.position);</span><br><span class="line">    <span class="comment">// 将起点添加到开放列表</span></span><br><span class="line">    openList.Add(startNode);</span><br><span class="line"></span><br><span class="line">    StartCoroutine(Step());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到路径,输出提示</span></span><br><span class="line">    Debug.Log(<span class="string">&quot;未找到路径&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerator <span class="title">Step</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node endNode = GetNodeFromRect(endObj);</span><br><span class="line">    <span class="comment">// 当开放列表不为空时进行路径搜索</span></span><br><span class="line">    <span class="keyword">while</span> (openList.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 选择开放列表中 fCost 最小的节点作为当前节点</span></span><br><span class="line">        Node currentNode = openList[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; openList.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (openList[i].fCost &lt; currentNode.fCost || (openList[i].fCost == currentNode.fCost &amp;&amp; openList[i].hCost &lt; currentNode.hCost))</span><br><span class="line">            &#123;</span><br><span class="line">                currentNode = openList[i];</span><br><span class="line">            &#125;</span><br><span class="line">            openList[i].gameObject.GetComponent&lt;Image&gt;().color=Color.gray;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode.gameObject.GetComponent&lt;Image&gt;().color = Color.green;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从开放列表中移除当前节点,并添加到封闭列表</span></span><br><span class="line">        openList.Remove(currentNode);</span><br><span class="line">        closedList.Add(currentNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前节点是终点,输出提示并回溯路径</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.position == endNode.position)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">            <span class="comment">// VisualizePath(currentNode);</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">0.2f</span></span>)</span>;</span><br><span class="line">        <span class="comment">// 获取当前节点的邻居节点</span></span><br><span class="line">        GetNearNode(currentNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Debug.Log(<span class="string">&quot;搜索完所有可前往路径&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Image/AStarPathFinding/AStar.gif"
                      alt="alt text"
                ></p>
              </div>
            </details></li>
</ul>
]]></content>
      <categories>
        <category>Gameframework</category>
      </categories>
      <tags>
        <tag>游戏框架记录</tag>
      </tags>
  </entry>
</search>
